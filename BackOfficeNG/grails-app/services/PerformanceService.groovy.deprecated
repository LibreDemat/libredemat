import fr.cg95.cvq.business.request.Request
import fr.cg95.cvq.business.request.ecitizen.VoCardRequest
import fr.cg95.cvq.business.request.leisure.music.MusicSchoolRegistrationRequest
import fr.cg95.cvq.business.users.Address
import fr.cg95.cvq.business.users.Adult
import fr.cg95.cvq.business.users.Child
import fr.cg95.cvq.business.users.FamilyStatusType
import fr.cg95.cvq.business.users.HomeFolder
import fr.cg95.cvq.business.users.Individual
import fr.cg95.cvq.business.users.RoleType
import fr.cg95.cvq.business.users.TitleType
import fr.cg95.cvq.dao.hibernate.HibernateUtil
import fr.cg95.cvq.dao.request.IRequestDAO
import fr.cg95.cvq.exception.CvqObjectNotFoundException
import fr.cg95.cvq.security.SecurityContext
import fr.cg95.cvq.service.request.IRequestTypeService
import fr.cg95.cvq.service.request.ecitizen.IVoCardRequestService
import fr.cg95.cvq.service.users.IHomeFolderService
import fr.cg95.cvq.util.Critere
import fr.cg95.cvq.util.DateUtils
import fr.cg95.cvq.service.request.leisure.music.IMusicSchoolRegistrationRequestService
import fr.cg95.cvq.service.users.IIndividualService
import fr.cg95.cvq.business.authority.Agent
import fr.cg95.cvq.business.authority.Category
import fr.cg95.cvq.business.authority.CategoryProfile
import fr.cg95.cvq.business.authority.SiteRoles
import fr.cg95.cvq.business.authority.CategoryRoles
import fr.cg95.cvq.business.request.RequestType
import fr.cg95.cvq.dao.IGenericDAO
import fr.cg95.cvq.business.authority.SiteProfile


public class PerformanceService {
    
    IMusicSchoolRegistrationRequestService musicSchoolRegistrationRequestService
    IVoCardRequestService voCardRequestService
    IRequestTypeService requestTypeService
    IHomeFolderService homeFolderService
    IIndividualService individualService 
    IRequestDAO requestDAO
    IGenericDAO genericDAO
    
    public String agentNameWithCategoriesRoles = "demo1";
    public String agentNameWithManageRoles = "manager1";
    public String agentNameWithSiteRoles = "admin1";
    
    def random = new Random();
    
    def names = ("AURELE,AURELIUS,AURELIE,AURELIEN,AURORE,AVRIL,AXELLE,BABETTE,BAPTISTE,BARBARA,"+
        "BARNABE,BARTHELEMY,BASILE,BASTIEN,BAUDOUIN,BEATRICE,BENEDICTE"+
        "CORALIE,CORENTIN,CORIN,CORINNE,CORNELIE,COSETTE,COSME,CUNEGONDE,CYRILLE,DAMIEN,"+
        "DANIEL,DANIELE,DANIELLE,DAPHNE,DAVID,DEBORA,DELPHINE,DENIS,DENISE,DEODAT,DESIRE").split(",")
    
    def towns = ("Dimitrovgrad,Dzerzhinsk,Elektrostal,Elista,Engels,Glazov,Irkutsk,Ivanovo,Izhevsk,"+
        "Kaliningrad,Kaluga,Kamensk-Uralsky,Kamyshin,Kansk,Kazan,Kemerovo,Khabarovsk,Khimki,"+
        "Kiselyovsk,Kislovodsk,Kolomna,Komsomolsk-on-Amur,Korolyov,Kostroma,Kovrov,Krasnodar,"+
        "Krasnoyarsk,Kurgan,Kursk,Leninsk-Kuznetsky,Lipetsk,Lyubertsy,Magadan,Magnitogorsk,"+
        "Maykop,Makhachkala").split(",")
    
    def streets = ("4th Line Road,10th Line Road,Airport Parkway,Albert Street,Albion Road,"+
        "Alta Vista Drive,Anderson Road,Aviation Parkway,Bank Street,Bankfield Road,Baseline Road,"+
        "Bayshore Drive,Beechwood Avenue,Blair Road,Booth Street,Boundary Road,Bridge Street,"+
        "Bronson Avenue,Brookfield Road,Cambrian Road,Cameron Street,Campeau Drive,Carling Avenue,"+
        "Carp Road,Carp View Road,Castlefrank Road,Catherine Street,Cedarview Road,Century Road,"+
        "Chamberlain Avenue,Charlotte Street,Clyde Avenue,Colonel By Drive,Colonial Road").split(",")
    
    def sex = "Female,Mail".split(',')
    def titles = "Mister,Madame,Doctor,Miss,Unknown".split(',')
    def ft = "Single,Divorced,Married,CommonLawMarriage".split(',')
    
    def numbers = (0..9)
    def alpha = ('a'..'z')
    
    public Map createHomeFolder(String authorityName) {
//        SecurityContext.setCurrentSite(authorityName, SecurityContext.FRONT_OFFICE_CONTEXT)
        SecurityContext.setCurrentContext(SecurityContext.FRONT_OFFICE_CONTEXT)
        String adult1pass = this.getRandomAlpha(8)
        
        VoCardRequest creationRequest = new VoCardRequest()
        Address address = new Address()
        
        Adult adult1 = this.getAdult(address)
        adult1.password = adult1pass
        adult1.setFamilyStatus(FamilyStatusType.MARRIED) 
        this.homeFolderService.addHomeFolderRole(adult1,RoleType.HOME_FOLDER_RESPONSIBLE)
        
        Adult adult2 = this.getAdult(address)
        adult2.setFamilyStatus(FamilyStatusType.MARRIED)
        
        Adult adult3 = this.getAdult(address)
        List<Adult> adults = [adult1,adult2,adult3]
        
        Child child1 = this.getChild(address)
        Child child2 = this.getChild(address)
        
        homeFolderService.addIndividualRole(adult1, child1, RoleType.CLR_FATHER);
        homeFolderService.addIndividualRole(adult2, child1, RoleType.CLR_MOTHER);
        homeFolderService.addIndividualRole(adult3, child1, RoleType.CLR_TUTOR);
        homeFolderService.addIndividualRole(adult1, child2, RoleType.CLR_FATHER);
        
        List<Child> children = [child1,child2]
        println HibernateUtil.getSession()
        this.voCardRequestService.create(creationRequest, adults, children, address)
        this.reopenTransaction()
        def homeFolder = this.homeFolderService.getById(creationRequest.homeFolderId)
//        SecurityContext.resetCurrentSite()
        
        return [ 
            'homeFolder' : homeFolder,
            'password' : adult1pass,
            'adult1' : adult1
        ]
    }
    
    public void createDrafts(HomeFolder homeFolder) {
        Adult adult1 = this.homeFolderService.getHomeFolderResponsible(homeFolder.getId())
        
        SecurityContext.setCurrentContext(SecurityContext.FRONT_OFFICE_CONTEXT)
        SecurityContext.setCurrentEcitizen(adult1.getLogin())
        List <Individual> individuals = homeFolder.getIndividuals()
        
        individuals.each{
            MusicSchoolRegistrationRequest draft = new MusicSchoolRegistrationRequest()
            draft.setRequesterId(adult1.getId())
            draft.setSubjectId(it.id)
            this.musicSchoolRegistrationRequestService.prepareDraft(draft)
            this.musicSchoolRegistrationRequestService.processDraft(draft)
        }
    }
    
    public initRoles() {
        
        try {
            SecurityContext.setCurrentAgent(agentNameWithSiteRoles);
            return;
        } catch (CvqObjectNotFoundException confe) {}
        
        Agent admin = new Agent();
        admin.setActive(Boolean.TRUE);
        admin.setLogin(agentNameWithSiteRoles);
        SiteRoles siteRoles = new SiteRoles();
        siteRoles.setAgent(admin);
        siteRoles.setProfile(SiteProfile.ADMIN);
        Set<SiteRoles> siteRolesSet = new HashSet<SiteRoles>();
        siteRolesSet.add(siteRoles);
        admin.setSitesRoles(siteRolesSet);
        genericDAO.create(admin);

        SecurityContext.setCurrentAgent(agentNameWithSiteRoles);

        Category category = new Category();
        category.setName("General");
        List<RequestType> requestTypesSet = requestTypeService.getAllRequestTypes();
        for (RequestType requestType : requestTypesSet) {
            requestType.setCategory(category);
            genericDAO.update(requestType);
        }
        category.setRequestTypes(new HashSet<RequestType>(requestTypesSet));
        genericDAO.create(category);
                        
        Agent agent = bootstrapAgent(agentNameWithCategoriesRoles, category,
                CategoryProfile.READ_WRITE);
        genericDAO.create(agent);
        
        Agent manager = bootstrapAgent(agentNameWithManageRoles, category, 
                CategoryProfile.MANAGER);
        genericDAO.create(manager);
    }
    
    private Agent bootstrapAgent(String agentName, Category category, CategoryProfile categoryProfile) {

        Agent agent = new Agent();
        agent.setActive(Boolean.TRUE);
        agent.setLogin(agentName);

        SiteRoles siteRoles = new SiteRoles();
        siteRoles.setAgent(agent);
        siteRoles.setProfile(SiteProfile.AGENT);
        Set<SiteRoles> siteRolesSet = new HashSet<SiteRoles>();
        siteRolesSet.add(siteRoles);
        agent.setSitesRoles(siteRolesSet);

        CategoryRoles categoryRoles = new CategoryRoles();
        categoryRoles.setAgent(agent);
        categoryRoles.setCategory(category);
        categoryRoles.setProfile(categoryProfile);
        Set<CategoryRoles> categoryRolesSet = new HashSet<CategoryRoles>();
        categoryRolesSet.add(categoryRoles);
        agent.setCategoriesRoles(categoryRolesSet);
        
        return agent;
    }
    
    public List removeDrafts(String login) {
        def result = []
        SecurityContext.setCurrentSite(
            SecurityContext.currentSite.name, 
            SecurityContext.BACK_OFFICE_CONTEXT)
        SecurityContext.setCurrentAgent(agentNameWithManageRoles)
        
        Individual user = individualService.getByLogin(login)
        
        this.reopenTransaction()
        
        List<Request> requests = musicSchoolRegistrationRequestService.getByRequesterId(user.id);
        homeFolderService.delete(user.homeFolder.id)
        
        for(Request r : requests) {
            try {
                this.musicSchoolRegistrationRequestService.delete(r.getId())
            } catch(CvqObjectNotFoundException e) {
                this.requestDAO.delete(r)
            }
            result.add(r.getId())
        }
        
//        SecurityContext.setCurrentSite(
//            SecurityContext.currentSite.name, 
//            SecurityContext.FRONT_OFFICE_CONTEXT);
        
        SecurityContext.resetCurrentSite();
        return result
    }
    
    public void reopenTransaction() {
        HibernateUtil.commitTransaction()
        HibernateUtil.closeSession()
        HibernateUtil.beginTransaction()
    }
    
    List<Request> getDrafts() {
        Set<Critere> criterias = new HashSet<Critere>();
        
        Critere criteria = new Critere();
        criteria.setAttribut(Request.DRAFT);
        criteria.setComparatif(Critere.EQUALS);
        criteria.setValue(true);
        criterias.add(criteria);

        return this.requestDAO.search(criterias,null,null,0,0);
    }
    
    public Adult getAdult(Address address) {
        
        Adult adult = new Adult();
        adult.setTitle(TitleType.forString(this.getRandomElement("titles")));
        adult.setLastName(this.getRandomElement("names"));
        adult.setFirstName(this.getRandomElement("names"));
        adult.setFirstName2(this.getRandomElement("names"));
        adult.setFirstName3(this.getRandomElement("names"));
        adult.setNameOfUse(this.getRandomElement("names"));
        adult.setFamilyStatus(FamilyStatusType.forString(this.getRandomElement('ft')));
        adult.setHomePhone(this.getRandomNum(10));
        adult.setMobilePhone(this.getRandomNum(10));
        adult.setOfficePhone(this.getRandomNum(10));
        adult.setPassword(this.getRandomAlpha(8))
        adult.setEmail("${this.getRandomElement('names')}@"+
            "${this.getRandomElement('names')}.${this.getRandomAlpha(2)}");
        adult.setCfbn("${this.getRandomNum(7)}E");
        adult.setProfession(this.getRandomAlpha(10));
        adult.setSex(this.getRandomElement("sex"));
        if (address) adult.setAddress(address);
        
        return adult;
    }
    
    public Child getChild(Address address) {
        Child child = new Child();
        child.setLastName(this.getRandomElement("names"));
        child.setFirstName(this.getRandomElement("names"));
        child.setSex(this.getRandomElement("sex"));
        child.setNote("Et un enfant, un !");
        child.setBirthCity(this.getRandomElement("towns"));
        child.setBirthPostalCode(this.getRandomNum(5));
        child.setBirthDate(DateUtils.getShiftedDate(Calendar.YEAR,
            (-1 * Integer.parseInt(this.getRandomNum(1)))));
        
        return child;
    }
    
    public Address getAddress() {
        Address address = new Address();
        address.setAdditionalDeliveryInformation("Chez ${this.getRandomElement("names")}");
        address.setAdditionalGeographicalInformation("Bat. de ${this.getRandomElement("towns")}");
        address.setStreetNumber(this.getRandomNum(2));
        address.setStreetName(this.getRandomElement("streets"));
        address.setCity(this.getRandomElement("towns"));
        address.setPostalCode(this.getRandomNum(5));
        return address;
    }
    
    public String getRandomElement(el) {
        def lst = this."${el}" as List
        return lst.get(this.random.nextInt(lst.size)).toString()
    }
    
    public String getRandomAlpha(length) {
        return this.getRandomAlpaNum("alpha",length);
    }
    
    public String getRandomNum(length) {
        return this.getRandomAlpaNum("numbers",length);
    }
    
    protected String getRandomAlpaNum(type,length) {
        def lst = this."$type" , result = ""
        length.times { result += lst.get(this.random.nextInt(lst.size()))}
        return result
    }
}