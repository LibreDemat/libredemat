<?xml version="1.0" encoding="UTF-8"?>
<project name="LibreDémat - Model" default="dist" basedir="./">

    <description>Ant build file for the LibreDémat - Model project.</description>

<!--
init
clean -> init
compile-external-schemas -> init
process-resources -> init
compile-sources -> compile-external-schemas, process-resources
compile-external-schemas -> init
dist -> compile-sources
prepare-configfiles -> init
admin-package -> prepare-configfiles, schemaexport
deploy -> compile-external-schemas, dist
schemaexport -> compile-sources
load-hibernate-properties-file
hsql-write-delay-config -> load-hibernate-properties-file

## various quality
-->

    <target name="init">
        <!-- model specific properties -->
        <property file="${basedir}/build.properties" />

        <mkdir dir="${basedir}/${build.classes.dir}" />
        <mkdir dir="${basedir}/${build.archives.dir}" />

        <!-- Paths -->
        <path id="classpath.compile">
            <fileset dir="${libraries.dir}">
                <include name="**/*.jar" />
                <!-- do not include our own production -->
                <exclude name="**/${application.name}-${module.name}-${application.version}.jar" />
                <exclude name="org.libredemat/plugins/${application.name}*.jar" />
            </fileset>

            <fileset dir="${basedir}/${lib.dir}">
                <include name="**/soap.jar" />
                <include name="**/activation.jar" />
                <include name="**/mail.jar" />
            </fileset>
        </path>

    </target>

    <!-- =================================================================== -->
    <!--                        Regular targets                              -->
    <!-- =================================================================== -->

    <target name="clean" depends="init">
        <delete>
            <fileset dir="${basedir}">
                <include name="${application.name}-admin-*.zip" />
            </fileset>
        </delete>
        <delete dir="${basedir}/${build.dir}" />
        <delete dir="${basedir}/${src.xml.hibernate.dir}/fr" />
        <delete dir="${conf.dir.spring}" />
        <delete dir="${conf.dir.log4j}" />
        <delete dir="${basedir}/utils/lib" />
    </target>

    <target name="process-resources" depends="init">
        <echo>copy and process the resources into the destination directory, ready for packaging.</echo>
        <!-- Copy all resources to destination directory -->
        <copy todir="${basedir}/${build.classes.dir}">
            <fileset dir="${basedir}/${src.resources.dir}" />
        </copy>
    </target>

    <target name="compile" depends="process-resources">
        <antcall target="compile-external-schemas" />
        <antcall target="compile-sources" />
    </target>

    <target name="compile-sources" depends="compile-external-schemas, process-resources">
        <mkdir dir="${basedir}/${build.classes.dir}" />
        <javac optimize="on" nowarn="on"  debug="on" deprecation="off" encoding="UTF8" verbose="off" srcdir="${basedir}/${src.java.dir}" includes="**/*.java" destdir="${basedir}/${build.classes.dir}">
            <classpath>
                <path refid="classpath.compile" />
                <pathelement location="${basedir}/${build.archives.dir}/${application.name}-ExternalServicesSchemas-${application.version}.jar" />
            </classpath>
        </javac>
    </target>

    <target name="compile-external-schemas" description="Compile external services schemas" depends="init">

        <taskdef name="xmlbean" classname="org.apache.xmlbeans.impl.tool.XMLBean" classpathref="classpath.compile">
        </taskdef>

        <xmlbean destfile="${basedir}/${build.archives.dir}/${application.name}-ExternalServicesSchemas-${application.version}.jar" classpathref="classpath.compile" download="true">
            <fileset dir="${src.xml.dir}/schemas/external">
                <include name="**/*.xsd" />
            </fileset>
            <fileset dir="${conf.dir.xmlbeans}" includes="schemas.xsdconfig" />
        </xmlbean>
        <copy todir="${deploy.model.dir}" file="${basedir}/${build.archives.dir}/${application.name}-ExternalServicesSchemas-${application.version}.jar" />
    </target>

    <target name="dist" depends="compile-sources" description="Build the Model jar for inclusion by webapps">
        <jar compress="on" jarfile="${basedir}/${build.archives.dir}/${application.name}-${module.name}-${application.version}.jar" manifest="${basedir}/${src.java.dir}/META-INF/manifest.mf">
            <fileset dir="${basedir}/${build.classes.dir}">
                <include name="**/**" />
            </fileset>
            <!-- include application resources properties files (not used currently) -->
            <fileset dir="${basedir}/${src.java.dir}">
                <include name="**/*.properties" />
            </fileset>

            <fileset dir="${conf.dir.security}">
                <include name="securityPolicy.xml" />
            </fileset>
            <fileset dir="${src.xml.schemas.external.dir}">
                <include name="**/*.xsd" />
            </fileset>
        </jar>
    </target>

    <target name="prepare-configfiles" depends="init">
        <mkdir dir="${conf.dir.spring}" />
        <copy file="${libraries.springconf.dir}/applicationContext.xml" todir="${conf.dir.spring}" overwrite="true" />
        <copy file="${libraries.springconf.dir}/applicationContext-deployment.xml" todir="${conf.dir.spring}" overwrite="true" />
        <copy file="${libraries.springconf.dir}/applicationContext-admin.xml" todir="${conf.dir.spring}" overwrite="true" />
        <copy file="${libraries.deployments.dir}/${deploy.properties_file}" todir="${conf.dir.spring}" failonerror="true" />
    </target>

    <!-- a special zip file containing setup and referential data -->
    <target name="admin-package" depends="prepare-configfiles, schemaexport">
        <copy file="${basedir}/test/conf/log4j/log4j.properties" todir="${conf.dir.log4j}" overwrite="true" />
        <zip destfile="${application.name}-admin-${application.version}-${application.revision}.zip">
            <fileset dir="${basedir}">
                <include name="db/**/*.sql" />
                <include name="conf/css/**" />
                <include name="conf/local_referential/**" />
                <include name="conf/img/**" />
                <include name="conf/xsl/**" />
                <include name="conf/spring/**" />
                <include name="conf/html/**" />
                <include name="conf/log4j/**" />
                <include name="conf/pdf/**" />
                <include name="conf/xml/**" />
                <include name="test/data/**" />
                <include name="utils/admin/**" />
            </fileset>
            <zipfileset prefix="utils/admin" dir="${deploy.admin.dir}" includes="*" />
        </zip>
        <move file="${application.name}-admin-${application.version}-${application.revision}.zip" todir="${release.dir}" />
    </target>

    <!-- copy Model production to the common lib repository -->
    <target name="deploy" depends="compile-external-schemas, dist">
        <copy todir="${deploy.model.dir}" file="${basedir}/${build.archives.dir}/${application.name}-${module.name}-${application.version}.jar" />
    </target>

    <!-- =================================================================== -->
    <!--                     SQL schema generation                           -->
    <!-- =================================================================== -->

    <target name="schemaexport" depends="compile-sources">
        <taskdef name="hibernatetool" classname="org.hibernate.tool.ant.HibernateToolTask" classpathref="classpath.compile" />
        <hibernatetool destdir="${db.dir}">
            <jpaconfiguration persistenceunit="libredematPersistenceUnit" />
            <classpath>
                <path location="${basedir}/${build.classes.dir}" />
            </classpath>
            <hbm2ddl drop="true" create="true" export="true" outputfilename="create_schema_pgsql.sql" delimiter=";" format="true" />
        </hibernatetool>
        <echo file="${db.dir}/create_schema_pgsql.sql" append="true" message="CREATE SEQUENCE systempay_trans_id_seq MINVALUE 0 MAXVALUE 899999 INCREMENT 1 CYCLE;" />
    </target>

</project>
