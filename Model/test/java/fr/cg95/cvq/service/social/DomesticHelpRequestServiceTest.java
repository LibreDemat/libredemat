package fr.cg95.cvq.service.social;

import fr.cg95.cvq.business.users.*;
import fr.cg95.cvq.business.authority.*;
import fr.cg95.cvq.business.document.DepositOrigin;
import fr.cg95.cvq.business.document.DepositType;
import fr.cg95.cvq.business.document.Document;
import fr.cg95.cvq.business.request.MeansOfContact;
import fr.cg95.cvq.business.request.MeansOfContactEnum;
import fr.cg95.cvq.business.request.Request;
import fr.cg95.cvq.business.request.RequestState;
import fr.cg95.cvq.business.social.*;
import fr.cg95.cvq.exception.*;
import fr.cg95.cvq.security.SecurityContext;
import fr.cg95.cvq.service.document.IDocumentService;
import fr.cg95.cvq.service.request.IRequestService;
import fr.cg95.cvq.service.social.IDomesticHelpRequestService;
import fr.cg95.cvq.util.Critere;

import fr.cg95.cvq.testtool.ServiceTestCase;
import fr.cg95.cvq.testtool.TestUtils;
import fr.cg95.cvq.testtool.BusinessObjectsFactory;

import fr.cg95.cvq.xml.social.DomesticHelpRequestDocument;

import org.apache.commons.lang.StringUtils;
import org.springframework.context.ConfigurableApplicationContext;

import junit.framework.Assert;

import java.util.*;
import java.io.File;
import java.io.FileOutputStream;
import java.math.BigInteger;

/**
 * Generated by Velocity if not present, can be edited safely !
 */
public class DomesticHelpRequestServiceTest extends ServiceTestCase {

    protected IDomesticHelpRequestService iDomesticHelpRequestService;

    protected void onSetUp() throws Exception {
    	super.onSetUp();
        ConfigurableApplicationContext cac = getContext(getConfigLocations());
        iDomesticHelpRequestService = 
            (IDomesticHelpRequestService) cac.getBean(StringUtils.uncapitalize("DomesticHelpRequest") + "Service");
    }

    protected DomesticHelpRequest fillMeARequest() throws CvqException {

        DomesticHelpRequest request = new DomesticHelpRequest();
          request.setExpensesTotal(BigInteger.valueOf(1));
              request.setCurrentDwellingType(DhrDwellingType.DOMICILE);
                        request.setProfessionalTaxes(BigInteger.valueOf(1));
              if ("SpouseSocialSecurityNumber".length() > 13)
        request.setSpouseSocialSecurityNumber("SpouseSocialSecurityNumber".substring(0, 13));
      else
        request.setSpouseSocialSecurityNumber("SpouseSocialSecurityNumber");
                        request.setSpousePensions(BigInteger.valueOf(1));
            request.setTaxesTotal(BigInteger.valueOf(1));
                            Address TutorAddress = BusinessObjectsFactory.gimmeAdress("1", "Unit test address", "Paris", "75012");
            request.setTutorAddress(TutorAddress);
    	                request.setRequesterInvestmentIncome(BigInteger.valueOf(1));
            request.setAlimonies(BigInteger.valueOf(1));
                    request.setSharesAmount(BigInteger.valueOf(1));
            request.setCurrentDwellingArrivalDate(new Date());
            request.setIncomeTax(BigInteger.valueOf(1));
              if ("TutorName".length() > 38)
        request.setTutorName("TutorName".substring(0, 38));
      else
        request.setTutorName("TutorName");
                request.setSpouseAllowances(BigInteger.valueOf(1));
            request.setCurrentDwellingNetFloorArea(BigInteger.valueOf(1));
              request.setCurrentDwellingStatus(DhrDwellingStatusType.OWNER);
                  if ("SpouseEmployer".length() > 50)
        request.setSpouseEmployer("SpouseEmployer".substring(0, 50));
      else
        request.setSpouseEmployer("SpouseEmployer");
                  request.setRequesterPensionPlan(DhrPensionPlanType.C_R_A_M_I_F);
                  request.setNationality(NationalityType.FRENCH);
                request.setRealAssetsValuesTotal(BigInteger.valueOf(1));
                            Address SpouseEmployerAddress = BusinessObjectsFactory.gimmeAdress("1", "Unit test address", "Paris", "75012");
            request.setSpouseEmployerAddress(SpouseEmployerAddress);
    	                  request.setSpouseNationality(NationalityType.FRENCH);
                        	    request.setCurrentDwellingAddress(address);
                            request.setSpouseInformation(homeFolderWoman);
                request.setTutorPresence(Boolean.valueOf(true));
              if ("SocialSecurityNumber".length() > 13)
        request.setSocialSecurityNumber("SocialSecurityNumber".substring(0, 13));
      else
        request.setSocialSecurityNumber("SocialSecurityNumber");
                request.setRequesterIncomesAnnualTotal(BigInteger.valueOf(1));
              request.setTutor(DhrTutorType.SAUVEGARDE_JUSTICE);
                request.setLocalRate(BigInteger.valueOf(1));
            request.setRequesterPensions(BigInteger.valueOf(1));
            request.setSpouseFranceArrivalDate(new Date());
            request.setCapitalAmountTotal(BigInteger.valueOf(1));
            request.setPropertyTaxes(BigInteger.valueOf(1));
              if ("TutorFirstName".length() > 38)
        request.setTutorFirstName("TutorFirstName".substring(0, 38));
      else
        request.setTutorFirstName("TutorFirstName");
                request.setDonationsValuesTotal(BigInteger.valueOf(1));
            request.setSavingsTotal(BigInteger.valueOf(1));
            request.setSpouseIncomesAnnualTotal(BigInteger.valueOf(1));
              if ("SocialSecurityKeyNumber".length() > 2)
        request.setSocialSecurityKeyNumber("SocialSecurityKeyNumber".substring(0, 2));
      else
        request.setSocialSecurityKeyNumber("SocialSecurityKeyNumber");
                  if ("SpouseSocialSecurityKeyNumber".length() > 2)
        request.setSpouseSocialSecurityKeyNumber("SpouseSocialSecurityKeyNumber".substring(0, 2));
      else
        request.setSpouseSocialSecurityKeyNumber("SpouseSocialSecurityKeyNumber");
                  if ("SpouseOccupation".length() > 50)
        request.setSpouseOccupation("SpouseOccupation".substring(0, 50));
      else
        request.setSpouseOccupation("SpouseOccupation");
                request.setFranceArrivalDate(new Date());
            request.setRequesterAllowances(BigInteger.valueOf(1));
                    request.setSpouseInvestmentIncome(BigInteger.valueOf(1));
              request.setSpousePensionPlan(DhrPensionPlanType.C_R_A_M_I_F);
                request.setBondsAmount(BigInteger.valueOf(1));
            request.setSpouseNetIncome(BigInteger.valueOf(1));
            request.setSpousePensionner(Boolean.valueOf(true));
            request.setRequesterNetIncome(BigInteger.valueOf(1));
            request.setRent(BigInteger.valueOf(1));
            request.setCurrentDwellingRoomNumber(BigInteger.valueOf(1));
  
        // Means Of Contact
        MeansOfContact meansOfContact = iMeansOfContactService.getMeansOfContactByType(
                    MeansOfContactEnum.EMAIL);
        request.setMeansOfContact(meansOfContact);
        
        DomesticHelpRequestFeeder.feed(request);
        
        return request;
    }
        	
    protected void completeValidateAndDelete(DomesticHelpRequest request) 
    	throws CvqException, java.io.IOException {
    	
        // add a document to the request
        ///////////////////////////////

        Document doc = new Document();
        doc.setEcitizenNote("Ma carte d'identit√© !");
        doc.setDepositOrigin(DepositOrigin.ECITIZEN);
        doc.setDepositType(DepositType.PC);
        doc.setDocumentType(iDocumentService.getDocumentTypeById(IDocumentService.IDENTITY_RECEIPT_TYPE));
        Long documentId = iDocumentService.create(doc, request.getHomeFolder().getId(), 
        					  request.getRequester().getId());
        iDomesticHelpRequestService.addDocument(request.getId(), documentId);
        Set documentsSet =
            iDomesticHelpRequestService.getAssociatedDocuments(request.getId());
        Assert.assertEquals(documentsSet.size(), 1);

        // FIXME : test list of pending / in-progress registrations
        Critere testCrit = new Critere();
        testCrit.setAttribut(Request.SEARCH_BY_REQUESTER_LASTNAME);
        testCrit.setComparatif(Critere.EQUALS);
        testCrit.setValue(request.getRequester().getLastName());
        Set testCritSet = new HashSet();
        testCritSet.add(testCrit);
        Set allRequests = iRequestService.get(testCritSet, null, false);
        Assert.assertNotNull(allRequests);

        // close current session and re-open a new one
        continueWithNewTransaction();
        
        SecurityContext.setCurrentSite(localAuthorityName,
                                        SecurityContext.BACK_OFFICE_CONTEXT);
        SecurityContext.setCurrentAgent(agentNameWithCategoriesRoles);
        iDomesticHelpRequestService.complete(request.getId());
        iDomesticHelpRequestService.validate(request.getId());

        // close current session and re-open a new one
        continueWithNewTransaction();
        
        byte[] generatedCertificate = iRequestService.getCertificate(request.getId(),
                                                                     RequestState.PENDING);

        if (generatedCertificate == null)
            fail("No certificate found");
            
        //     Write tele-service xml data file
        File xmlFile = File.createTempFile("tmp" + request.getId(), ".xml");
        FileOutputStream xmlFos = new FileOutputStream(xmlFile);
        xmlFos.write(iRequestService.getById(request.getId()).modelToXmlString().getBytes());

        File file = File.createTempFile("tmp" + request.getId(), ".pdf");
        FileOutputStream fos = new FileOutputStream(file);
        fos.write(generatedCertificate);

        // close current session and re-open a new one
        continueWithNewTransaction();
        
        // delete request
        iDomesticHelpRequestService.delete(request.getId());
    }


    public void testWithHomeFolderXml() throws CvqException,
			CvqObjectNotFoundException, java.io.FileNotFoundException,
			java.io.IOException {

        startTransaction();
        
	SecurityContext.setCurrentSite(localAuthorityName,
					SecurityContext.FRONT_OFFICE_CONTEXT);

	// create a vo card request (to create home folder and associates)
	CreationBean cb = gimmeAnHomeFolder();

	Long voCardRequestId = cb.getRequestId();
	String proposedLogin = cb.getLogin();

        // close current session and re-open a new one
        continueWithNewTransaction();
        
	SecurityContext.setCurrentEcitizen(proposedLogin);

	// get the home folder id
	HomeFolder homeFolder = iHomeFolderService.getByRequestId(voCardRequestId);
	Assert.assertNotNull(homeFolder);
	Long homeFolderId = homeFolder.getId();
	Assert.assertNotNull(homeFolderId);

	// fill and create the request
	// ////////////////////////////

	DomesticHelpRequest request = fillMeARequest();
	request.setRequester(homeFolder.getHomeFolderResponsible());
        DomesticHelpRequestFeeder.setSubject(request, homeFolder);

        Set authorizedSubjects = iDomesticHelpRequestService.getAuthorizedSubjects(homeFolderId).keySet();

	DomesticHelpRequestDocument requestDoc =
		(DomesticHelpRequestDocument) request.modelToXml();
	Long requestId = iDomesticHelpRequestService.create(requestDoc.getDomNode());

        // close current session and re-open a new one
        continueWithNewTransaction();
        
        Map newAuthorizedSubjectsMap = iDomesticHelpRequestService.getAuthorizedSubjects(homeFolderId);
        if (newAuthorizedSubjectsMap == null) 
            Assert.assertEquals(authorizedSubjects.size(), 1);
        else
            Assert.assertEquals(newAuthorizedSubjectsMap.size(), authorizedSubjects.size() - 1);

	DomesticHelpRequest requestFromDb = 
		(DomesticHelpRequest) iDomesticHelpRequestService.getById(requestId);
	Assert.assertEquals(requestId, requestFromDb.getId());
	Adult requester = requestFromDb.getRequester();
	Assert.assertNotNull(requester);
	Assert.assertNotNull(requestFromDb.getMeansOfContact());
    Assert.assertEquals(requestFromDb.getMeansOfContact().getType(), MeansOfContactEnum.EMAIL);

        // close current session and re-open a new one
        continueWithNewTransaction();
        
	completeValidateAndDelete(requestFromDb);

        // close current session and re-open a new one
        continueWithNewTransaction();
        
        HomeFolder homeFolderAfterDelete = iHomeFolderService.getById(homeFolderId);
        Assert.assertNotNull(homeFolderAfterDelete);
        Assert.assertNotNull(homeFolderAfterDelete.getHomeFolderResponsible());
    }

    public void testWithoutHomeFolder()
        throws CvqException, CvqObjectNotFoundException,
               java.io.FileNotFoundException, java.io.IOException {

	if (!iDomesticHelpRequestService.supportUnregisteredCreation())
	    return;

	startTransaction();
	
        SecurityContext.setCurrentSite(localAuthorityName,
                                        SecurityContext.FRONT_OFFICE_CONTEXT);
        
        DomesticHelpRequest request = fillMeARequest();

        Address address = BusinessObjectsFactory.gimmeAdress("12", "Rue d'Aligre", "Paris", "75012");
        Adult requester =
            BusinessObjectsFactory.gimmeAdult(TitleType.MISTER, "LASTNAME", "requester", address,
                                              FamilyStatusType.MARRIED);
        requester.setPassword("requester");
        request.setRequester(requester);
        requester.setAdress(address);
        DomesticHelpRequestFeeder.setSubject(request, null);

        DomesticHelpRequestDocument requestDoc = 
            (DomesticHelpRequestDocument) request.modelToXml();
        Long requestId =
             iDomesticHelpRequestService.create(requestDoc.getDomNode());
        
        // close current session and re-open a new one
        continueWithNewTransaction();
        
        // start testing request creation
        /////////////////////////////////

        DomesticHelpRequest requestFromDb =
            (DomesticHelpRequest) iDomesticHelpRequestService.getById(requestId);
        Assert.assertEquals(requestId, requestFromDb.getId());
        requester = requestFromDb.getRequester();
        Assert.assertNotNull(requester);
        
        Long homeFolderId = requestFromDb.getHomeFolder().getId();
        Long requesterId = requestFromDb.getRequester().getId();

        // close current session and re-open a new one
        continueWithNewTransaction();
        
        completeValidateAndDelete(requestFromDb);
        
        // close current session and re-open a new one
        continueWithNewTransaction();
        
        try {
            iHomeFolderService.getById(homeFolderId);
            fail("should not have found home folder");
        } catch (CvqObjectNotFoundException confe) {
            // great, that was expected
        }
        try {
            iAdultService.getById(requesterId);
            fail("should not have found requester");
        } catch (CvqObjectNotFoundException confe) {
            // great, that was expected
        }

        SecurityContext.resetCurrentSite();
        
        commitTransaction();
    }
}
