package fr.cg95.cvq.service.request.social;

import fr.cg95.cvq.business.users.*;
import fr.cg95.cvq.business.request.*;
import fr.cg95.cvq.business.authority.*;
import fr.cg95.cvq.business.document.*;
import fr.cg95.cvq.business.request.social.*;
import fr.cg95.cvq.exception.*;
import fr.cg95.cvq.security.SecurityContext;
import fr.cg95.cvq.service.document.IDocumentTypeService;
import fr.cg95.cvq.service.request.IRequestService;
import fr.cg95.cvq.service.request.social.IHandicapAllowanceRequestService;
import fr.cg95.cvq.util.Critere;

import fr.cg95.cvq.testtool.ServiceTestCase;
import fr.cg95.cvq.testtool.BusinessObjectsFactory;

import org.apache.commons.lang.StringUtils;

import java.util.*;
import java.io.File;
import java.io.FileOutputStream;
import java.math.BigInteger;

/**
 * Generated by Velocity if not present, can be edited safely !
 */
public class HandicapAllowanceRequestServiceTest extends ServiceTestCase {

    protected IHandicapAllowanceRequestService iHandicapAllowanceRequestService;

    protected void onSetUp() throws Exception {
    	super.onSetUp();
        iHandicapAllowanceRequestService = 
            (IHandicapAllowanceRequestService) getBean(StringUtils.uncapitalize("HandicapAllowanceRequest") + "Service");
    }

    protected HandicapAllowanceRequest fillMeARequest() throws CvqException {

        HandicapAllowanceRequest request = new HandicapAllowanceRequest();
            request.setHarLessThan20RequesterGender(HarGenderType.MALE);
                            request.setHarPaymentAgencyBeneficiaryNumber("HarPaymentAgencyBeneficiaryNumber");
                    request.setHarPreviousFormation("HarPreviousFormation");
                request.setHarFollowUp(Boolean.valueOf(true));
            request.setHarLegalAccessPresence(Boolean.valueOf(true));
                request.setHarSocialSecurityAgencyName("HarSocialSecurityAgencyName");
                  if ("HarRequesterCity".length() > 32)
        request.setHarRequesterCity("HarRequesterCity".substring(0, 32));
      else
        request.setHarRequesterCity("HarRequesterCity");
                        request.setHarDisabilityRecognition(Boolean.valueOf(true));
            request.setHarAdditionalAllocationForEducationOfDisabledChildren(Boolean.valueOf(true));
              if ("HarLessThan20RequesterRepresentativeFirstName".length() > 38)
        request.setHarLessThan20RequesterRepresentativeFirstName("HarLessThan20RequesterRepresentativeFirstName".substring(0, 38));
      else
        request.setHarLessThan20RequesterRepresentativeFirstName("HarLessThan20RequesterRepresentativeFirstName");
                request.setHarDisabilityPension(Boolean.valueOf(true));
            request.setHarDisabilityCard(Boolean.valueOf(true));
            request.setHarFreePensionMembershipRequest(Boolean.valueOf(true));
              request.setHarLessThan20RequesterAuthorityHolder(HarLessThan20RequesterAuthorityHolderType.FATHER);
                    request.setHarHousingFacilitiesDetails("HarHousingFacilitiesDetails");
                request.setHarSpecializedTransport(Boolean.valueOf(true));
              if ("HarSocialSecurityAgencyPostalCode".length() > 5)
        request.setHarSocialSecurityAgencyPostalCode("HarSocialSecurityAgencyPostalCode".substring(0, 5));
      else
        request.setHarSocialSecurityAgencyPostalCode("HarSocialSecurityAgencyPostalCode");
                    request.setHarSchoolAddress("HarSchoolAddress");
                    request.setHarAttendedGrade("HarAttendedGrade");
                request.setHarHousingFacilities(Boolean.valueOf(true));
            request.setHarHomeSchooling(Boolean.valueOf(true));
            request.setHarFollowedByPhysician(Boolean.valueOf(true));
              if ("HarDwellingSocialReceptionCity".length() > 32)
        request.setHarDwellingSocialReceptionCity("HarDwellingSocialReceptionCity".substring(0, 32));
      else
        request.setHarDwellingSocialReceptionCity("HarDwellingSocialReceptionCity");
                request.setHarOtherRequest(Boolean.valueOf(true));
            request.setHarParkingCard(Boolean.valueOf(true));
              request.setFamilyStatus(HarFamilyStatusType.SINGLE);
                  if ("HarLessThan20RequesterRepresentativeDepartment".length() > 2)
        request.setHarLessThan20RequesterRepresentativeDepartment("HarLessThan20RequesterRepresentativeDepartment".substring(0, 2));
      else
        request.setHarLessThan20RequesterRepresentativeDepartment("HarLessThan20RequesterRepresentativeDepartment");
                    request.setHarSpecializedTransportDetails("HarSpecializedTransportDetails");
                  if ("HarLessThan20RequesterRepresentativeCity".length() > 32)
        request.setHarLessThan20RequesterRepresentativeCity("HarLessThan20RequesterRepresentativeCity".substring(0, 32));
      else
        request.setHarLessThan20RequesterRepresentativeCity("HarLessThan20RequesterRepresentativeCity");
                  if ("HarRequesterBirthCity".length() > 32)
        request.setHarRequesterBirthCity("HarRequesterBirthCity".substring(0, 32));
      else
        request.setHarRequesterBirthCity("HarRequesterBirthCity");
                    request.setHarProfessionalStatusProfession("HarProfessionalStatusProfession");
                    request.setHarCDESDepartment("HarCDESDepartment");
                request.setHarCompensatoryAllowanceForExpenses(Boolean.valueOf(true));
                request.setHarPaymentAgencyAddress("HarPaymentAgencyAddress");
                    request.setHarLessThan20RequesterRepresentativeStreetName("HarLessThan20RequesterRepresentativeStreetName");
                request.setHarCDESFile(Boolean.valueOf(true));
                request.setHarFollowedByPhysicianDetails("HarFollowedByPhysicianDetails");
                  if ("HarLessThan20RequesterCity".length() > 32)
        request.setHarLessThan20RequesterCity("HarLessThan20RequesterCity".substring(0, 32));
      else
        request.setHarLessThan20RequesterCity("HarLessThan20RequesterCity");
                    request.setHarCurrentFormation("HarCurrentFormation");
                          if ("HarLessThan20RequesterRepresentativeName".length() > 38)
        request.setHarLessThan20RequesterRepresentativeName("HarLessThan20RequesterRepresentativeName".substring(0, 38));
      else
        request.setHarLessThan20RequesterRepresentativeName("HarLessThan20RequesterRepresentativeName");
                  if ("HarLessThan20RequesterParentFirstName".length() > 38)
        request.setHarLessThan20RequesterParentFirstName("HarLessThan20RequesterParentFirstName".substring(0, 38));
      else
        request.setHarLessThan20RequesterParentFirstName("HarLessThan20RequesterParentFirstName");
                    request.setHarCOTOREPNumber("HarCOTOREPNumber");
                request.setHarDisabledWorkerRecognition(Boolean.valueOf(true));
              if ("HarHighSchoolCity".length() > 32)
        request.setHarHighSchoolCity("HarHighSchoolCity".substring(0, 32));
      else
        request.setHarHighSchoolCity("HarHighSchoolCity");
                request.setHarTechnicalHelpRequest(Boolean.valueOf(true));
                request.setHarFollowedByHospitalDetails("HarFollowedByHospitalDetails");
                    request.setHarProjectNeeds("HarProjectNeeds");
                    request.setHarTechnicalAssistanceDetails("HarTechnicalAssistanceDetails");
                    request.setHarCDESNumber("HarCDESNumber");
                    request.setHarHighSchoolGrade("HarHighSchoolGrade");
                request.setHarHighSchool(Boolean.valueOf(true));
                request.setHarSchoolName("HarSchoolName");
                  if ("HarLessThan20RequesterName".length() > 38)
        request.setHarLessThan20RequesterName("HarLessThan20RequesterName".substring(0, 38));
      else
        request.setHarLessThan20RequesterName("HarLessThan20RequesterName");
                    request.setHarLegalAccessRepresentativeKindDetail("HarLegalAccessRepresentativeKindDetail");
                  if ("HarHomeSchoolingAccompanistFirstName".length() > 38)
        request.setHarHomeSchoolingAccompanistFirstName("HarHomeSchoolingAccompanistFirstName".substring(0, 38));
      else
        request.setHarHomeSchoolingAccompanistFirstName("HarHomeSchoolingAccompanistFirstName");
                  if ("HarHighSchoolPostalCode".length() > 5)
        request.setHarHighSchoolPostalCode("HarHighSchoolPostalCode".substring(0, 5));
      else
        request.setHarHighSchoolPostalCode("HarHighSchoolPostalCode");
                  request.setHarRequestInformationProfile(HarRequestInformationProfileType.ADULT);
                request.setHarIndemnified(Boolean.valueOf(true));
                request.setHarOtherRequestDetails("HarOtherRequestDetails");
                    request.setHarHighSchoolAddress("HarHighSchoolAddress");
                request.setHarIsCareAssistant(Boolean.valueOf(true));
              if ("HarLegalAccessRepresentativePostalCode".length() > 5)
        request.setHarLegalAccessRepresentativePostalCode("HarLegalAccessRepresentativePostalCode".substring(0, 5));
      else
        request.setHarLegalAccessRepresentativePostalCode("HarLegalAccessRepresentativePostalCode");
                request.setHarCOTOREPFile(Boolean.valueOf(true));
            request.setHarDailyAllowances(Boolean.valueOf(true));
              if ("HarLessThan20RequesterBirthCity".length() > 32)
        request.setHarLessThan20RequesterBirthCity("HarLessThan20RequesterBirthCity".substring(0, 32));
      else
        request.setHarLessThan20RequesterBirthCity("HarLessThan20RequesterBirthCity");
                  request.setHarSocialSecurityMemberShipKind(HarSocialSecurityMemberShipKindType.INSURED);
                  if ("HarSocialSecurityNumber".length() > 13)
        request.setHarSocialSecurityNumber("HarSocialSecurityNumber".substring(0, 13));
      else
        request.setHarSocialSecurityNumber("HarSocialSecurityNumber");
                                  if ("HarLegalAccessRepresentativeMobilePhone".length() > 10)
        request.setHarLegalAccessRepresentativeMobilePhone("HarLegalAccessRepresentativeMobilePhone".substring(0, 10));
      else
        request.setHarLegalAccessRepresentativeMobilePhone("HarLegalAccessRepresentativeMobilePhone");
                request.setHarPTCARenewalRequest(Boolean.valueOf(true));
            request.setHarSchoolingEnrolment(Boolean.valueOf(true));
            request.setHarSpecializedGrade(Boolean.valueOf(true));
            request.setHarDwellingSocialReception(Boolean.valueOf(true));
                request.setHarRequesterStreetName("HarRequesterStreetName");
                  if ("HarLessThan20RequesterParentCity".length() > 32)
        request.setHarLessThan20RequesterParentCity("HarLessThan20RequesterParentCity".substring(0, 32));
      else
        request.setHarLessThan20RequesterParentCity("HarLessThan20RequesterParentCity");
                request.setHarSupportedByAnInstitution(Boolean.valueOf(true));
                request.setHarStudiesLevel("HarStudiesLevel");
                request.setHarVocationalTrainingRequest(Boolean.valueOf(true));
            request.setHarDisabledWorkerRecognitionRequest(Boolean.valueOf(true));
                request.setHarLegalAccessRepresentativeStreetName("HarLegalAccessRepresentativeStreetName");
                request.setHarTransportCostAllocationRequest(Boolean.valueOf(true));
            request.setHarDisabilityCompensation(Boolean.valueOf(true));
              request.setHarDwellingKind(HarDwellingKindType.PLACE_OF_RESIDENCE);
                request.setHarIsFamilyCarer(Boolean.valueOf(true));
            request.setHarCustomCar(Boolean.valueOf(true));
            request.setHarIsCarer(Boolean.valueOf(true));
              if ("HarLegalAccessRepresentativePhone".length() > 10)
        request.setHarLegalAccessRepresentativePhone("HarLegalAccessRepresentativePhone".substring(0, 10));
      else
        request.setHarLegalAccessRepresentativePhone("HarLegalAccessRepresentativePhone");
                    request.setHarAssistanceUnderDisabilityDetails("HarAssistanceUnderDisabilityDetails");
                  if ("HarLessThan20RequesterParentMobilePhone".length() > 10)
        request.setHarLessThan20RequesterParentMobilePhone("HarLessThan20RequesterParentMobilePhone".substring(0, 10));
      else
        request.setHarLessThan20RequesterParentMobilePhone("HarLessThan20RequesterParentMobilePhone");
                  if ("HarLegalAccessRepresentativeName".length() > 38)
        request.setHarLegalAccessRepresentativeName("HarLegalAccessRepresentativeName".substring(0, 38));
      else
        request.setHarLegalAccessRepresentativeName("HarLegalAccessRepresentativeName");
                  if ("HarDwellingReceptionPostalCode".length() > 5)
        request.setHarDwellingReceptionPostalCode("HarDwellingReceptionPostalCode".substring(0, 5));
      else
        request.setHarDwellingReceptionPostalCode("HarDwellingReceptionPostalCode");
                    request.setHarCOTOREPDepartment("HarCOTOREPDepartment");
                request.setHarProfessionalOrientation(Boolean.valueOf(true));
              if ("HarPaymentAgencyPostalCode".length() > 5)
        request.setHarPaymentAgencyPostalCode("HarPaymentAgencyPostalCode".substring(0, 5));
      else
        request.setHarPaymentAgencyPostalCode("HarPaymentAgencyPostalCode");
                  request.setHarLegalAccessKind(HarLegalAccessKindType.SAFEGUARDING_JUSTICE);
                request.setHarDwellingEstablishmentReception(Boolean.valueOf(true));
              if ("HarLessThan20RequesterFirstName".length() > 38)
        request.setHarLessThan20RequesterFirstName("HarLessThan20RequesterFirstName".substring(0, 38));
      else
        request.setHarLessThan20RequesterFirstName("HarLessThan20RequesterFirstName");
                request.setHarRequesterBirthDate(new Date());
              if ("HarRequesterFirstName".length() > 38)
        request.setHarRequesterFirstName("HarRequesterFirstName".substring(0, 38));
      else
        request.setHarRequesterFirstName("HarRequesterFirstName");
                    request.setHarExtraCurricular("HarExtraCurricular");
                    request.setHarLegalAccessRepresentativeEmail("HarLegalAccessRepresentativeEmail");
                  request.setHarProfessionalStatusEnvironment(HarProfessionalStatusEnvironmentType.ORDINARY);
                request.setHarElectiveFunctionDetails(Boolean.valueOf(true));
            request.setHarOrdinaryworkingRequest(Boolean.valueOf(true));
            request.setHarIncreaseForIndependentLivingRequest(Boolean.valueOf(true));
              if ("HarSocialProfessionalPostalCode".length() > 5)
        request.setHarSocialProfessionalPostalCode("HarSocialProfessionalPostalCode".substring(0, 5));
      else
        request.setHarSocialProfessionalPostalCode("HarSocialProfessionalPostalCode");
                  if ("HarLegalAccessRepresentativeCity".length() > 32)
        request.setHarLegalAccessRepresentativeCity("HarLegalAccessRepresentativeCity".substring(0, 32));
      else
        request.setHarLegalAccessRepresentativeCity("HarLegalAccessRepresentativeCity");
                  if ("HarSchoolCity".length() > 32)
        request.setHarSchoolCity("HarSchoolCity".substring(0, 32));
      else
        request.setHarSchoolCity("HarSchoolCity");
                request.setHarDisabledPriorityCardRequest(Boolean.valueOf(true));
              if ("HarLessThan20RequesterRepresentativePostalCode".length() > 5)
        request.setHarLessThan20RequesterRepresentativePostalCode("HarLessThan20RequesterRepresentativePostalCode".substring(0, 5));
      else
        request.setHarLessThan20RequesterRepresentativePostalCode("HarLessThan20RequesterRepresentativePostalCode");
                  request.setHarSchoolingKind(HarSchoolingKindType.FULL_TIME);
                    request.setHarProfessionalStatusAddress("HarProfessionalStatusAddress");
                request.setFamilyHasFamilyDependents(Boolean.valueOf(true));
              if ("HarLessThan20RequesterPhone".length() > 10)
        request.setHarLessThan20RequesterPhone("HarLessThan20RequesterPhone".substring(0, 10));
      else
        request.setHarLessThan20RequesterPhone("HarLessThan20RequesterPhone");
                request.setHarSupplementForSingleParents(Boolean.valueOf(true));
            request.setHarLessThan20RequesterRepresentativeReductionRatio(BigInteger.valueOf(1));
                request.setHarDwellingSocialReceptionAddress("HarDwellingSocialReceptionAddress");
                  if ("HarDwellingReceptionCity".length() > 32)
        request.setHarDwellingReceptionCity("HarDwellingReceptionCity".substring(0, 32));
      else
        request.setHarDwellingReceptionCity("HarDwellingReceptionCity");
                request.setHarFollowedByProfessional(Boolean.valueOf(true));
            request.setHarShelteredWorkRequest(Boolean.valueOf(true));
              if ("HarLessThan20RequesterMobilePhone".length() > 10)
        request.setHarLessThan20RequesterMobilePhone("HarLessThan20RequesterMobilePhone".substring(0, 10));
      else
        request.setHarLessThan20RequesterMobilePhone("HarLessThan20RequesterMobilePhone");
                request.setHarIndemnifiedDate(new Date());
                request.setHarAnimalAidDetails("HarAnimalAidDetails");
                request.setHarElectiveFunction(Boolean.valueOf(true));
              if ("HarHomeSchoolingAccompanistLastName".length() > 38)
        request.setHarHomeSchoolingAccompanistLastName("HarHomeSchoolingAccompanistLastName".substring(0, 38));
      else
        request.setHarHomeSchoolingAccompanistLastName("HarHomeSchoolingAccompanistLastName");
                    request.setHarDisabilityPensionCategory("HarDisabilityPensionCategory");
                  if ("HarRequesterName".length() > 38)
        request.setHarRequesterName("HarRequesterName".substring(0, 38));
      else
        request.setHarRequesterName("HarRequesterName");
                  request.setHarProfessionalStatusKind(HarProfessionalStatusKindType.EMPLOYEE);
                    request.setHarSocialSecurityAgencyAddress("HarSocialSecurityAgencyAddress");
                    request.setHarPaymentAgencyName("HarPaymentAgencyName");
                  if ("HarRequesterMaidenName".length() > 38)
        request.setHarRequesterMaidenName("HarRequesterMaidenName".substring(0, 38));
      else
        request.setHarRequesterMaidenName("HarRequesterMaidenName");
                  if ("HarLessThan20RequesterParentPhone".length() > 10)
        request.setHarLessThan20RequesterParentPhone("HarLessThan20RequesterParentPhone".substring(0, 10));
      else
        request.setHarLessThan20RequesterParentPhone("HarLessThan20RequesterParentPhone");
                    if ("HarSocialProfessionalCity".length() > 32)
        request.setHarSocialProfessionalCity("HarSocialProfessionalCity".substring(0, 32));
      else
        request.setHarSocialProfessionalCity("HarSocialProfessionalCity");
                request.setHarTechnicalAssistance(Boolean.valueOf(true));
                request.setHarLessThan20RequesterParentJob("HarLessThan20RequesterParentJob");
                request.setHarLessThan20RequesterBirthDate(new Date());
                request.setHarMDPHNumber("HarMDPHNumber");
                  request.setHarDwellingReceptionType(HarDwellingReceptionKindType.INTERNSHIP);
                request.setHarDisabledAdultAllowanceRequest(Boolean.valueOf(true));
              if ("HarDwellingSocialReceptionPostalCode".length() > 5)
        request.setHarDwellingSocialReceptionPostalCode("HarDwellingSocialReceptionPostalCode".substring(0, 5));
      else
        request.setHarDwellingSocialReceptionPostalCode("HarDwellingSocialReceptionPostalCode");
                request.setHarDisabledAdultAllocation(Boolean.valueOf(true));
                if ("HarRequesterPhone".length() > 10)
        request.setHarRequesterPhone("HarRequesterPhone".substring(0, 10));
      else
        request.setHarRequesterPhone("HarRequesterPhone");
                request.setHarThridPartySupplement(Boolean.valueOf(true));
            request.setHarDisabilityCardRequest(Boolean.valueOf(true));
              request.setHarLegalAccessRepresentativeKind(HarLegalAccessRepresentativeKindType.FAMILY_MEMBER);
                  if ("HarProfessionalStatusPostalCode".length() > 5)
        request.setHarProfessionalStatusPostalCode("HarProfessionalStatusPostalCode".substring(0, 5));
      else
        request.setHarProfessionalStatusPostalCode("HarProfessionalStatusPostalCode");
                request.setHarProfessionalEvaluation(Boolean.valueOf(true));
            request.setHarEducationAllocationOfDisabledChildrenRequest(Boolean.valueOf(true));
              if ("HarSchoolPostalCode".length() > 5)
        request.setHarSchoolPostalCode("HarSchoolPostalCode".substring(0, 5));
      else
        request.setHarSchoolPostalCode("HarSchoolPostalCode");
                    request.setHarDwellingReceptionAddress("HarDwellingReceptionAddress");
                  if ("HarRequesterPostalCode".length() > 5)
        request.setHarRequesterPostalCode("HarRequesterPostalCode".substring(0, 5));
      else
        request.setHarRequesterPostalCode("HarRequesterPostalCode");
                    request.setHarFollowedByProfessionalDetails("HarFollowedByProfessionalDetails");
                request.setHarSchoolingTime(BigInteger.valueOf(1));
              request.setHarPaymentAgencyBeneficiary(HarPaymentAgencyBeneficiaryType.C_A_F);
                request.setHarSendToSchool(Boolean.valueOf(true));
                request.setHarSpecializedGradeDetails("HarSpecializedGradeDetails");
                    request.setHarSocialProfessionalLastName("HarSocialProfessionalLastName");
                  if ("HarPaymentAgencyCity".length() > 32)
        request.setHarPaymentAgencyCity("HarPaymentAgencyCity".substring(0, 32));
      else
        request.setHarPaymentAgencyCity("HarPaymentAgencyCity");
                    request.setHarSupportedByAnInstitutionDetails("HarSupportedByAnInstitutionDetails");
                  request.setHarHomeSchoolingKind(HarHomeSchoolingKindType.ALONE);
                request.setHarLessThan20RequesterRepresentativeActivityReduction(Boolean.valueOf(true));
              if ("HarLessThan20RequesterRepresentativeMobilePhone".length() > 10)
        request.setHarLessThan20RequesterRepresentativeMobilePhone("HarLessThan20RequesterRepresentativeMobilePhone".substring(0, 10));
      else
        request.setHarLessThan20RequesterRepresentativeMobilePhone("HarLessThan20RequesterRepresentativeMobilePhone");
                            request.setHarDwellingPrecision("HarDwellingPrecision");
                request.setHarRegisterAsUnemployed(Boolean.valueOf(true));
                request.setHarProjectComments("HarProjectComments");
                  if ("HarRequesterMobilePhone".length() > 10)
        request.setHarRequesterMobilePhone("HarRequesterMobilePhone".substring(0, 10));
      else
        request.setHarRequesterMobilePhone("HarRequesterMobilePhone");
                  request.setHarRequesterTitle(HarTitleType.MISS);
                    request.setHarLessThan20RequesterParentStreetName("HarLessThan20RequesterParentStreetName");
                    request.setHarSocialProfessionalAddress("HarSocialProfessionalAddress");
                    request.setHarCustomCarDetails("HarCustomCarDetails");
                    request.setHarLessThan20RequesterEmail("HarLessThan20RequesterEmail");
                request.setHarThridPartyCompensatoryAllowance(Boolean.valueOf(true));
            request.setHarMDPHFile(Boolean.valueOf(true));
                request.setHarAdditionalAllocationForEducationOfDisabledChildrenDetails("HarAdditionalAllocationForEducationOfDisabledChildrenDetails");
                request.setHarEducationAllocationOfDisabledChildren(Boolean.valueOf(true));
            request.setHarThridPersonCompensatoryAllowance(Boolean.valueOf(true));
            request.setHarCustomCarRequest(Boolean.valueOf(true));
            request.setHarAnimalAid(Boolean.valueOf(true));
            request.setHarRegisterAsUnemployedDate(new Date());
            request.setHarProfessionalOrientationRequest(Boolean.valueOf(true));
                request.setHarRequesterEmail("HarRequesterEmail");
                request.setHarFollowedByHospital(Boolean.valueOf(true));
            request.setHarIncreaseForIndependentLiving(Boolean.valueOf(true));
              if ("HarLessThan20RequesterParentPostalCode".length() > 5)
        request.setHarLessThan20RequesterParentPostalCode("HarLessThan20RequesterParentPostalCode".substring(0, 5));
      else
        request.setHarLessThan20RequesterParentPostalCode("HarLessThan20RequesterParentPostalCode");
                  if ("HarLegalAccessRepresentativeFirstName".length() > 38)
        request.setHarLegalAccessRepresentativeFirstName("HarLegalAccessRepresentativeFirstName".substring(0, 38));
      else
        request.setHarLegalAccessRepresentativeFirstName("HarLegalAccessRepresentativeFirstName");
                request.setHarDisabilityCostAllocationRequest(Boolean.valueOf(true));
                request.setDwellingReceptionNaming("DwellingReceptionNaming");
                    request.setHarProjectWish("HarProjectWish");
                  if ("HarSocialSecurityAgencyCity".length() > 32)
        request.setHarSocialSecurityAgencyCity("HarSocialSecurityAgencyCity".substring(0, 32));
      else
        request.setHarSocialSecurityAgencyCity("HarSocialSecurityAgencyCity");
                  if ("HarLessThan20RequesterParentName".length() > 38)
        request.setHarLessThan20RequesterParentName("HarLessThan20RequesterParentName".substring(0, 38));
      else
        request.setHarLessThan20RequesterParentName("HarLessThan20RequesterParentName");
                    request.setHarLessThan20RequesterStreetName("HarLessThan20RequesterStreetName");
                    request.setHarDiploma("HarDiploma");
                request.setHarEuropeanParkingCardRequest(Boolean.valueOf(true));
              request.setHarRequesterBirthCountry(CountryType.UNKNOWN);
                  if ("HarProfessionalStatusCity".length() > 32)
        request.setHarProfessionalStatusCity("HarProfessionalStatusCity".substring(0, 32));
      else
        request.setHarProfessionalStatusCity("HarProfessionalStatusCity");
                  if ("HarLessThan20RequesterPostalCode".length() > 5)
        request.setHarLessThan20RequesterPostalCode("HarLessThan20RequesterPostalCode".substring(0, 5));
      else
        request.setHarLessThan20RequesterPostalCode("HarLessThan20RequesterPostalCode");
                    request.setHarMDPHDepartment("HarMDPHDepartment");
                  if ("HarLessThan20RequesterRepresentativePhone".length() > 10)
        request.setHarLessThan20RequesterRepresentativePhone("HarLessThan20RequesterRepresentativePhone".substring(0, 10));
      else
        request.setHarLessThan20RequesterRepresentativePhone("HarLessThan20RequesterRepresentativePhone");
                request.setHarAssistanceUnderDisability(Boolean.valueOf(true));
            request.setHarWorkAccidentAnnuity(Boolean.valueOf(true));
                    request.setHarUnemploymentBenefits(Boolean.valueOf(true));
                request.setHarProfessionalOrientationDetails("HarProfessionalOrientationDetails");
                request.setHarHousingFacilitiesRequest(Boolean.valueOf(true));
              if ("HarHomeSchoolingAccompanistCity".length() > 32)
        request.setHarHomeSchoolingAccompanistCity("HarHomeSchoolingAccompanistCity".substring(0, 32));
      else
        request.setHarHomeSchoolingAccompanistCity("HarHomeSchoolingAccompanistCity");
                    request.setHarDwellingSocialReceptionNaming("HarDwellingSocialReceptionNaming");
                request.setHarPersonalizedSchoolingPlan(Boolean.valueOf(true));
            request.setHarAssistanceRequest(Boolean.valueOf(true));
            request.setHarSocialWelfare(Boolean.valueOf(true));
                request.setHarHomeSchoolingAccompanistAddress("HarHomeSchoolingAccompanistAddress");
                request.setHarInstitutionSupportRequest(Boolean.valueOf(true));
            request.setHarThirdPartyHelpRequest(Boolean.valueOf(true));
              if ("HarHomeSchoolingAccompanistPostalCode".length() > 5)
        request.setHarHomeSchoolingAccompanistPostalCode("HarHomeSchoolingAccompanistPostalCode".substring(0, 5));
      else
        request.setHarHomeSchoolingAccompanistPostalCode("HarHomeSchoolingAccompanistPostalCode");
                request.setHarProfessionalStatusDate(new Date());
            request.setHarDisabilityRecognitionRequest(Boolean.valueOf(true));
            request.setHarRequestDealWithSameProfessional(Boolean.valueOf(true));
              request.setHarLessThan20RequesterBirthCountry(CountryType.UNKNOWN);
                    request.setHarHighSchoolName("HarHighSchoolName");
                request.setHarPainfulStandingCard(Boolean.valueOf(true));
  
        // Means Of Contact
        MeansOfContact meansOfContact = iMeansOfContactService.getMeansOfContactByType(
                    MeansOfContactEnum.EMAIL);
        request.setMeansOfContact(meansOfContact);
        
        HandicapAllowanceRequestFeeder.feed(request);
        
        return request;
    }
        	
    protected void completeValidateAndDelete(HandicapAllowanceRequest request) 
    	throws CvqException, java.io.IOException {
    	
        // add a document to the request
        ///////////////////////////////

        Document doc = new Document();
        doc.setEcitizenNote("Ma carte d'identitÃ© !");
        doc.setDepositOrigin(DepositOrigin.ECITIZEN);
        doc.setDepositType(DepositType.PC);
        doc.setHomeFolderId(request.getHomeFolderId());
        doc.setIndividualId(request.getRequesterId());
        doc.setDocumentType(iDocumentTypeService.getDocumentTypeByType(IDocumentTypeService.IDENTITY_RECEIPT_TYPE));
        Long documentId = iDocumentService.create(doc);
        iHandicapAllowanceRequestService.addDocument(request.getId(), documentId);
        Set<RequestDocument> documentsSet =
            iHandicapAllowanceRequestService.getAssociatedDocuments(request.getId());
        assertEquals(documentsSet.size(), 1);

        // FIXME : test list of pending / in-progress registrations
        Critere testCrit = new Critere();
        testCrit.setAttribut(Request.SEARCH_BY_HOME_FOLDER_ID);
        testCrit.setComparatif(Critere.EQUALS);
        testCrit.setValue(request.getHomeFolderId());
        Set<Critere> testCritSet = new HashSet<Critere>();
        testCritSet.add(testCrit);
        List<Request> allRequests = iRequestService.get(testCritSet, null, null, -1, 0);
        assertNotNull(allRequests);

        // close current session and re-open a new one
        continueWithNewTransaction();
        
        SecurityContext.setCurrentSite(localAuthorityName,
                                        SecurityContext.BACK_OFFICE_CONTEXT);
        SecurityContext.setCurrentAgent(agentNameWithCategoriesRoles);
        iHandicapAllowanceRequestService.complete(request.getId());
        iHandicapAllowanceRequestService.validate(request.getId());

        // close current session and re-open a new one
        continueWithNewTransaction();
        
        byte[] generatedCertificate = iRequestService.getCertificate(request.getId(),
                                                                     RequestState.PENDING);

        if (generatedCertificate == null)
            fail("No certificate found");
            
        //     Write tele-service xml data file
        File xmlFile = File.createTempFile("tmp" + request.getId(), ".xml");
        FileOutputStream xmlFos = new FileOutputStream(xmlFile);
        xmlFos.write(iRequestService.getById(request.getId()).modelToXmlString().getBytes());

        File file = File.createTempFile("tmp" + request.getId(), ".pdf");
        FileOutputStream fos = new FileOutputStream(file);
        fos.write(generatedCertificate);

        // close current session and re-open a new one
        continueWithNewTransaction();
        
        // delete request
        iHandicapAllowanceRequestService.delete(request.getId());
    }

    public void testWithHomeFolderPojo()
    		throws CvqException, CvqObjectNotFoundException,
                java.io.FileNotFoundException, java.io.IOException {

         SecurityContext.setCurrentSite(localAuthorityName, SecurityContext.FRONT_OFFICE_CONTEXT);

         // create a vo card request (to create home folder and associates)
         CreationBean cb = gimmeAnHomeFolder();

         SecurityContext.setCurrentEcitizen(cb.getLogin());

         // get the home folder id
         HomeFolder homeFolder = iHomeFolderService.getById(cb.getHomeFolderId());
         assertNotNull(homeFolder);
         Long homeFolderId = homeFolder.getId();
         assertNotNull(homeFolderId);

         // fill and create the request
         //////////////////////////////

         HandicapAllowanceRequest request = fillMeARequest();
         request.setRequesterId(SecurityContext.getCurrentUserId());
         request.setHomeFolderId(homeFolderId);
         HandicapAllowanceRequestFeeder.setSubject(request, 
             iHandicapAllowanceRequestService.getSubjectPolicy(), null, homeFolder);
         
         Long requestId =
              iHandicapAllowanceRequestService.create(request);

         HandicapAllowanceRequest requestFromDb =
        	 	(HandicapAllowanceRequest) iHandicapAllowanceRequestService.getById(requestId);
         assertEquals(requestId, requestFromDb.getId());
         assertNotNull(requestFromDb.getRequesterId());
         assertNotNull(requestFromDb.getRequesterLastName());
         if (requestFromDb.getSubjectId() != null)
             assertNotNull(requestFromDb.getSubjectLastName());
         
         completeValidateAndDelete(requestFromDb);

         HomeFolder homeFolderAfterDelete = iHomeFolderService.getById(homeFolderId);
         assertNotNull(homeFolderAfterDelete);
         assertNotNull(iHomeFolderService.getHomeFolderResponsible(homeFolderAfterDelete.getId()));
         
         SecurityContext.resetCurrentSite();
    }


    public void testWithoutHomeFolder()
        throws CvqException, CvqObjectNotFoundException,
               java.io.FileNotFoundException, java.io.IOException {

	      if (!iHandicapAllowanceRequestService.supportUnregisteredCreation())
	         return;

	      startTransaction();
	
        SecurityContext.setCurrentSite(localAuthorityName, SecurityContext.FRONT_OFFICE_CONTEXT);
        
        HandicapAllowanceRequest request = fillMeARequest();

        Address address = BusinessObjectsFactory.gimmeAdress("12", "Rue d'Aligre", "Paris", "75012");
        Adult requester =
            BusinessObjectsFactory.gimmeAdult(TitleType.MISTER, "LASTNAME", "requester", address,
                                              FamilyStatusType.MARRIED);
        requester.setPassword("requester");
        requester.setAdress(address);
        iHomeFolderService.addHomeFolderRole(requester, RoleType.HOME_FOLDER_RESPONSIBLE);
        HandicapAllowanceRequestFeeder.setSubject(request, 
            iHandicapAllowanceRequestService.getSubjectPolicy(), requester, null);

        Long requestId =
             iHandicapAllowanceRequestService.create(request, requester, requester);
        
        // close current session and re-open a new one
        continueWithNewTransaction();
        
        // start testing request creation
        /////////////////////////////////

        HandicapAllowanceRequest requestFromDb =
            (HandicapAllowanceRequest) iHandicapAllowanceRequestService.getById(requestId);
        assertEquals(requestId, requestFromDb.getId());
        assertNotNull(requestFromDb.getRequesterId());
        assertNotNull(requestFromDb.getRequesterLastName());
        if (requestFromDb.getSubjectId() != null)
            assertNotNull(requestFromDb.getSubjectLastName());
        
        Long homeFolderId = requestFromDb.getHomeFolderId();
        Long requesterId = requestFromDb.getRequesterId();

        // close current session and re-open a new one
        continueWithNewTransaction();
        
        completeValidateAndDelete(requestFromDb);
        
        // close current session and re-open a new one
        continueWithNewTransaction();
        
        try {
            iHomeFolderService.getById(homeFolderId);
            fail("should not have found home folder");
        } catch (CvqObjectNotFoundException confe) {
            // great, that was expected
        }
        try {
            iIndividualService.getById(requesterId);
            fail("should not have found requester");
        } catch (CvqObjectNotFoundException confe) {
            // great, that was expected
        }

        SecurityContext.resetCurrentSite();
        
        commitTransaction();
    }
}
