package fr.cg95.cvq.service.request.school;

import java.io.File;
import java.io.FileOutputStream;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.apache.commons.lang.StringUtils;

import fr.cg95.cvq.business.document.DepositOrigin;
import fr.cg95.cvq.business.document.DepositType;
import fr.cg95.cvq.business.document.Document;
import fr.cg95.cvq.business.request.MeansOfContact;
import fr.cg95.cvq.business.request.MeansOfContactEnum;
import fr.cg95.cvq.business.request.Request;
import fr.cg95.cvq.business.request.RequestDocument;
import fr.cg95.cvq.business.request.RequestState;
import fr.cg95.cvq.business.request.school.ALevelsType;
import fr.cg95.cvq.business.request.school.CurrentStudiesLevelType;
import fr.cg95.cvq.business.request.school.CurrentStudiesType;
import fr.cg95.cvq.business.request.school.DistanceType;
import fr.cg95.cvq.business.request.school.StudyGrantRequest;
import fr.cg95.cvq.business.users.Address;
import fr.cg95.cvq.business.users.Adult;
import fr.cg95.cvq.business.users.CountryType;
import fr.cg95.cvq.business.users.CreationBean;
import fr.cg95.cvq.business.users.FamilyStatusType;
import fr.cg95.cvq.business.users.HomeFolder;
import fr.cg95.cvq.business.users.RoleType;
import fr.cg95.cvq.business.users.TitleType;
import fr.cg95.cvq.exception.CvqException;
import fr.cg95.cvq.exception.CvqObjectNotFoundException;
import fr.cg95.cvq.security.SecurityContext;
import fr.cg95.cvq.service.document.IDocumentTypeService;
import fr.cg95.cvq.testtool.BusinessObjectsFactory;
import fr.cg95.cvq.testtool.ServiceTestCase;
import fr.cg95.cvq.util.Critere;

/**
 * Generated by Velocity if not present, can be edited safely !
 */
public class StudyGrantRequestServiceTest extends ServiceTestCase {

    protected IStudyGrantRequestService iStudyGrantRequestService;

    @Override
    protected void onSetUp() throws Exception {
    	super.onSetUp();
        iStudyGrantRequestService = 
            (IStudyGrantRequestService) getBean(StringUtils.uncapitalize("StudyGrantRequest") + "Service");
    }

    protected StudyGrantRequest fillMeARequest() {

        StudyGrantRequest request = new StudyGrantRequest();
              request.setEdemandeId("EdemandeId");
                request.setSubjectBirthDate(new Date());
              if ("CurrentSchoolCity".length() > 32)
        request.setCurrentSchoolCity("CurrentSchoolCity".substring(0, 32));
      else
        request.setCurrentSchoolCity("CurrentSchoolCity");
                    request.setSubjectEmail("SubjectEmail");
                        request.setSubjectFirstRequest(Boolean.valueOf(true));
            request.setHasOtherHelp(Boolean.valueOf(true));
              if ("SubjectPhone".length() > 10)
        request.setSubjectPhone("SubjectPhone".substring(0, 10));
      else
        request.setSubjectPhone("SubjectPhone");
                  request.setCurrentStudies(CurrentStudiesType.LICENCE);
                  if ("AlevelsDate".length() > 4)
        request.setAlevelsDate("AlevelsDate".substring(0, 4));
      else
        request.setAlevelsDate("AlevelsDate");
                request.setAccountHolderBirthDate(new Date());
              if ("CounterCode".length() > 5)
        request.setCounterCode("CounterCode".substring(0, 5));
      else
        request.setCounterCode("CounterCode");
                          request.setAccountHolderTitle(TitleType.MISTER);
                  request.setAbroadInternshipSchoolCountry(CountryType.UNKNOWN);
                  if ("TaxHouseholdLastName".length() > 38)
        request.setTaxHouseholdLastName("TaxHouseholdLastName".substring(0, 38));
      else
        request.setTaxHouseholdLastName("TaxHouseholdLastName");
                    request.setAbroadInternshipSchoolName("AbroadInternshipSchoolName");
                  if ("AccountKey".length() > 2)
        request.setAccountKey("AccountKey".substring(0, 2));
      else
        request.setAccountKey("AccountKey");
                request.setHasRegionalCouncilHelp(Boolean.valueOf(true));
                request.setTaxHouseholdCityPrecision("TaxHouseholdCityPrecision");
                  request.setCurrentStudiesLevel(CurrentStudiesLevelType.FIRST_YEAR);
                  if ("CurrentSchoolPostalCode".length() > 5)
        request.setCurrentSchoolPostalCode("CurrentSchoolPostalCode".substring(0, 5));
      else
        request.setCurrentSchoolPostalCode("CurrentSchoolPostalCode");
                request.setAbroadInternshipStartDate(new Date());
              if ("AccountHolderLastName".length() > 38)
        request.setAccountHolderLastName("AccountHolderLastName".substring(0, 38));
      else
        request.setAccountHolderLastName("AccountHolderLastName");
                request.setHasCROUSHelp(Boolean.valueOf(true));
              if ("AccountHolderFirstName".length() > 38)
        request.setAccountHolderFirstName("AccountHolderFirstName".substring(0, 38));
      else
        request.setAccountHolderFirstName("AccountHolderFirstName");
                  if ("AccountNumber".length() > 11)
        request.setAccountNumber("AccountNumber".substring(0, 11));
      else
        request.setAccountNumber("AccountNumber");
                  request.setDistance(DistanceType.LESS_THAN30KMS);
                  request.setAlevels(ALevelsType.ES);
                request.setIsSubjectAccountHolder(Boolean.valueOf(true));
              if ("SubjectMobilePhone".length() > 10)
        request.setSubjectMobilePhone("SubjectMobilePhone".substring(0, 10));
      else
        request.setSubjectMobilePhone("SubjectMobilePhone");
                    request.setOtherStudiesLabel("OtherStudiesLabel");
                      request.setCurrentSchoolNamePrecision("CurrentSchoolNamePrecision");
                  request.setCurrentSchoolCountry(CountryType.UNKNOWN);
                                Address SubjectAddress = BusinessObjectsFactory.gimmeAdress("1", "Unit test address", "Paris", "75012");
            request.setSubjectAddress(SubjectAddress);
    	                request.setAbroadInternshipEndDate(new Date());
            request.setHasEuropeHelp(Boolean.valueOf(true));
                request.setAccountHolderEdemandeId("AccountHolderEdemandeId");
                  if ("TaxHouseholdFirstName".length() > 38)
        request.setTaxHouseholdFirstName("TaxHouseholdFirstName".substring(0, 38));
      else
        request.setTaxHouseholdFirstName("TaxHouseholdFirstName");
                  if ("BankCode".length() > 5)
        request.setBankCode("BankCode".substring(0, 5));
      else
        request.setBankCode("BankCode");
                request.setSandwichCourses(Boolean.valueOf(true));
            request.setAbroadInternship(Boolean.valueOf(true));
  
        // Means Of Contact
        MeansOfContact meansOfContact = iMeansOfContactService.getMeansOfContactByType(
                    MeansOfContactEnum.EMAIL);
        request.setMeansOfContact(meansOfContact);
        
        StudyGrantRequestFeeder.feed(request);
        
        return request;
    }
        	
    protected void completeValidateAndDelete(StudyGrantRequest request) 
    	throws CvqException, java.io.IOException {
    	
        // add a document to the request
        ///////////////////////////////

        Document doc = new Document();
        doc.setEcitizenNote("Ma carte d'identitÃ© !");
        doc.setDepositOrigin(DepositOrigin.ECITIZEN);
        doc.setDepositType(DepositType.PC);
        doc.setHomeFolderId(request.getHomeFolderId());
        doc.setIndividualId(request.getRequesterId());
        doc.setDocumentType(iDocumentTypeService.getDocumentTypeByType(IDocumentTypeService.IDENTITY_RECEIPT_TYPE));
        Long documentId = iDocumentService.create(doc);
        iStudyGrantRequestService.addDocument(request.getId(), documentId);
        Set<RequestDocument> documentsSet =
            iStudyGrantRequestService.getAssociatedDocuments(request.getId());
        assertEquals(documentsSet.size(), 1);

        // FIXME : test list of pending / in-progress registrations
        Critere testCrit = new Critere();
        testCrit.setAttribut(Request.SEARCH_BY_HOME_FOLDER_ID);
        testCrit.setComparatif(Critere.EQUALS);
        testCrit.setValue(request.getHomeFolderId());
        Set<Critere> testCritSet = new HashSet<Critere>();
        testCritSet.add(testCrit);
        List<Request> allRequests = iRequestService.get(testCritSet, null, null, -1, 0);
        assertNotNull(allRequests);

        // close current session and re-open a new one
        continueWithNewTransaction();
        
        SecurityContext.setCurrentSite(localAuthorityName,
                                        SecurityContext.BACK_OFFICE_CONTEXT);
        SecurityContext.setCurrentAgent(agentNameWithCategoriesRoles);
        iRequestWorkflowService.updateRequestState(request.getId(), RequestState.COMPLETE, null);
        iRequestWorkflowService.updateRequestState(request.getId(), RequestState.VALIDATED, null);

        // close current session and re-open a new one
        continueWithNewTransaction();
        
        byte[] generatedCertificate = iRequestService.getCertificate(request.getId(),
                                                                     RequestState.PENDING);

        if (generatedCertificate == null)
            fail("No certificate found");
            
        //     Write tele-service xml data file
        File xmlFile = File.createTempFile("tmp" + request.getId(), ".xml");
        FileOutputStream xmlFos = new FileOutputStream(xmlFile);
        xmlFos.write(iRequestService.getById(request.getId()).modelToXmlString().getBytes());

        File file = File.createTempFile("tmp" + request.getId(), ".pdf");
        FileOutputStream fos = new FileOutputStream(file);
        fos.write(generatedCertificate);

        // close current session and re-open a new one
        continueWithNewTransaction();
        
        // delete request
        iStudyGrantRequestService.delete(request.getId());
    }

    public void testWithHomeFolderPojo()
    		throws CvqException, CvqObjectNotFoundException,
                java.io.FileNotFoundException, java.io.IOException {

         SecurityContext.setCurrentSite(localAuthorityName, SecurityContext.FRONT_OFFICE_CONTEXT);

         // create a vo card request (to create home folder and associates)
         CreationBean cb = gimmeAnHomeFolder();

         SecurityContext.setCurrentEcitizen(cb.getLogin());

         // get the home folder id
         HomeFolder homeFolder = iHomeFolderService.getById(cb.getHomeFolderId());
         assertNotNull(homeFolder);
         Long homeFolderId = homeFolder.getId();
         assertNotNull(homeFolderId);

         // fill and create the request
         //////////////////////////////

         StudyGrantRequest request = fillMeARequest();
         request.setRequesterId(SecurityContext.getCurrentUserId());
         request.setHomeFolderId(homeFolderId);
         StudyGrantRequestFeeder.setSubject(request, 
             iStudyGrantRequestService.getSubjectPolicy(), null, homeFolder);
         
         Long requestId =
              iStudyGrantRequestService.create(request);

         StudyGrantRequest requestFromDb =
        	 	(StudyGrantRequest) iStudyGrantRequestService.getById(requestId);
         assertEquals(requestId, requestFromDb.getId());
         assertNotNull(requestFromDb.getRequesterId());
         assertNotNull(requestFromDb.getRequesterLastName());
         if (requestFromDb.getSubjectId() != null)
             assertNotNull(requestFromDb.getSubjectLastName());
         
         completeValidateAndDelete(requestFromDb);

         HomeFolder homeFolderAfterDelete = iHomeFolderService.getById(homeFolderId);
         assertNotNull(homeFolderAfterDelete);
         assertNotNull(iHomeFolderService.getHomeFolderResponsible(homeFolderAfterDelete.getId()));
         
         SecurityContext.resetCurrentSite();
    }


    public void testWithoutHomeFolder()
        throws CvqException, CvqObjectNotFoundException,
               java.io.FileNotFoundException, java.io.IOException {

	      if (!iStudyGrantRequestService.supportUnregisteredCreation())
	         return;

	      startTransaction();
	
        SecurityContext.setCurrentSite(localAuthorityName, SecurityContext.FRONT_OFFICE_CONTEXT);
        
        StudyGrantRequest request = fillMeARequest();

        Address address = BusinessObjectsFactory.gimmeAdress("12", "Rue d'Aligre", "Paris", "75012");
        Adult requester =
            BusinessObjectsFactory.gimmeAdult(TitleType.MISTER, "LASTNAME", "requester", address,
                                              FamilyStatusType.MARRIED);
        requester.setPassword("requester");
        requester.setAdress(address);
        iHomeFolderService.addHomeFolderRole(requester, RoleType.HOME_FOLDER_RESPONSIBLE);
        StudyGrantRequestFeeder.setSubject(request, 
            iStudyGrantRequestService.getSubjectPolicy(), requester, null);

        Long requestId =
             iStudyGrantRequestService.create(request, requester, requester);
        
        // close current session and re-open a new one
        continueWithNewTransaction();
        
        // start testing request creation
        /////////////////////////////////

        StudyGrantRequest requestFromDb =
            (StudyGrantRequest) iStudyGrantRequestService.getById(requestId);
        assertEquals(requestId, requestFromDb.getId());
        assertNotNull(requestFromDb.getRequesterId());
        assertNotNull(requestFromDb.getRequesterLastName());
        if (requestFromDb.getSubjectId() != null)
            assertNotNull(requestFromDb.getSubjectLastName());
        
        Long homeFolderId = requestFromDb.getHomeFolderId();
        Long requesterId = requestFromDb.getRequesterId();

        // close current session and re-open a new one
        continueWithNewTransaction();
        
        completeValidateAndDelete(requestFromDb);
        
        // close current session and re-open a new one
        continueWithNewTransaction();
        
        try {
            iHomeFolderService.getById(homeFolderId);
            fail("should not have found home folder");
        } catch (CvqObjectNotFoundException confe) {
            // great, that was expected
        }
        try {
            iIndividualService.getById(requesterId);
            fail("should not have found requester");
        } catch (CvqObjectNotFoundException confe) {
            // great, that was expected
        }

        SecurityContext.resetCurrentSite();
        
        commitTransaction();
    }
}
