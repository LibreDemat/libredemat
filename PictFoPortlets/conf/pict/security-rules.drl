<?xml version="1.0" encoding="UTF-8"?>
<rule-set name="Regles d'acces niveau portail"
          xmlns="http://drools.org/rules"
          xmlns:groovy="http://drools.org/semantics/groovy"
          xmlns:xs="http://www.w3.org/2001/XMLSchema-instance"
          xs:schemaLocation="http://drools.org/rules rules.xsd
          http://drools.org/semantics/groovy groovy.xsd">

          <rule name="Les objets tagges communaute.tous sont vus par tout le monde" salience="100">
                <parameter identifier="object"><groovy:class>com.zenexity.pict.portal.om.AccessControlable</groovy:class></parameter>
                <parameter identifier="permission"><groovy:class>java.lang.String</groovy:class></parameter>
                <parameter identifier="access"><groovy:class>com.zenexity.pict.portal.rules.Access</groovy:class></parameter>
                <groovy:condition>permission == 'read'</groovy:condition>
                <groovy:condition>object.hasClass('communaute.tous')</groovy:condition>
                <groovy:consequence>
                    access.grant();
                </groovy:consequence>
          </rule>

          <rule name="Les objets tagges communaute.authentifies sont vus par les utilisateurs authentifies" salience="100">
                <parameter identifier="object"><groovy:class>com.zenexity.pict.portal.om.AccessControlable</groovy:class></parameter>
                <parameter identifier="permission"><groovy:class>java.lang.String</groovy:class></parameter>
                <parameter identifier="access"><groovy:class>com.zenexity.pict.portal.rules.Access</groovy:class></parameter>
                <parameter identifier="principal"><groovy:class>com.zenexity.pict.portal.security.PictPrincipal</groovy:class></parameter>
                <groovy:condition>permission == 'read'</groovy:condition>
                <groovy:condition>object.hasClass('communaute.authentifies')</groovy:condition>
                <groovy:condition>!principal.guest</groovy:condition>
                <groovy:condition>access.unknown</groovy:condition>
                <groovy:consequence>
                    access.grant();
                </groovy:consequence>
          </rule>
          
</rule-set>

		