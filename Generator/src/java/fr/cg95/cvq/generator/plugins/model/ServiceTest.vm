package fr.cg95.cvq.service.request.${request.requestNamespaceLastParticle};

import fr.cg95.cvq.business.users.*;
import fr.cg95.cvq.business.request.*;
import fr.cg95.cvq.business.authority.*;
import fr.cg95.cvq.business.document.*;
import fr.cg95.cvq.business.request.${request.requestNamespaceLastParticle}.*;
import fr.cg95.cvq.exception.*;
import fr.cg95.cvq.security.SecurityContext;
import fr.cg95.cvq.service.document.IDocumentTypeService;
import fr.cg95.cvq.service.request.IRequestService;
import fr.cg95.cvq.service.request.${request.requestNamespaceLastParticle}.I${request.requestName}Service;
import fr.cg95.cvq.util.Critere;

import fr.cg95.cvq.testtool.ServiceTestCase;
import fr.cg95.cvq.testtool.BusinessObjectsFactory;

import org.apache.commons.lang.StringUtils;

import java.util.*;
import java.io.File;
import java.io.FileOutputStream;
import java.math.BigInteger;

/**
 * Generated by Velocity if not present, can be edited safely !
 */
public class ${request.requestName}ServiceTest extends ServiceTestCase {

    protected I${request.requestName}Service i${request.requestName}Service;

    protected void onSetUp() throws Exception {
    	super.onSetUp();
        i${request.requestName}Service = 
            (I${request.requestName}Service) getBean(StringUtils.uncapitalize("${request.requestName}") + "Service");
    }

    protected ${request.requestName} fillMeARequest() throws CvqException {

        ${request.requestName} request = new ${request.requestName}();
#foreach($field in $request.elementsPropertiesMap.keySet())
  #set($fieldProperties = $request.elementsPropertiesMap.get($field))
  #if(${fieldProperties.xmlBeanType} == "org.apache.xmlbeans.XmlLong")
        request.set$field(new Long(1));
  #elseif(${fieldProperties.xmlBeanType} == "org.apache.xmlbeans.XmlString")
    #if($fieldProperties.enumValues)
      #set($anEnumValue = $request.getRandomEnumFromTab($fieldProperties.enumValues))
      #set($anEnumValue = $request.getEnumStaticName($anEnumValue))
      request.set$field(${fieldProperties.xmlSchemaType}.$anEnumValue);
    #elseif($fieldProperties.maxLength && $fieldProperties.maxLength > 0)
      if ("$field".length() > $fieldProperties.maxLength)
        request.set$field("$field".substring(0, $fieldProperties.maxLength));
      else
        request.set$field("$field");
    #elseif($fieldProperties.length && $fieldProperties.length > 0)
      if ("$field".length() > $fieldProperties.length)
        request.set$field("$field".substring(0, $fieldProperties.length));
      else
        request.set$field("$field");
    #else
        request.set$field("$field");
    #end
  #elseif(${fieldProperties.xmlBeanType} == "org.apache.xmlbeans.XmlDate")
        request.set$field(new Date());
  #elseif(${fieldProperties.xmlBeanType} == "org.apache.xmlbeans.XmlToken")
        request.set$field("$field");
  #elseif(${fieldProperties.xmlBeanType} == "org.apache.xmlbeans.XmlPositiveInteger")
        request.set$field(BigInteger.valueOf(1));
  #elseif(${fieldProperties.xmlBeanType} == "org.apache.xmlbeans.XmlBoolean")
        request.set$field(Boolean.valueOf(true));
  #elseif(${fieldProperties.xmlBeanType} == "org.apache.xmlbeans.XmlObject")
    #set($xmlSchemaType = $fieldProperties.xmlSchemaType)
    #if($xmlSchemaType == "AddressType")
        #if($fieldProperties.isTiedToRequest())
            Address ${field} = BusinessObjectsFactory.gimmeAdress("1", "Unit test address", "Paris", "75012");
            request.set$field(${field});
    	#else
    	    request.set$field(address);
        #end
    #elseif($xmlSchemaType == "IndividualType")
        request.set$field(homeFolderWoman);
    #elseif($xmlSchemaType == "AdultType")
        request.set$field(homeFolderWoman);
    #elseif($xmlSchemaType == "ChildType")
        request.set$field(child1);
    #elseif($xmlSchemaType == "RecreationCenterType")
       request.set$field((RecreationCenter) recreationCenterService.getAll().iterator().next());
    #elseif($xmlSchemaType == "SchoolType")
       request.set$field((School) schoolService.getAll().iterator().next());
    #end
  #end
#end

        // Means Of Contact
        MeansOfContact meansOfContact = iMeansOfContactService.getMeansOfContactByType(
                    MeansOfContactEnum.EMAIL);
        request.setMeansOfContact(meansOfContact);
        
        ${request.requestName}Feeder.feed(request);
        
        return request;
    }
        	
    protected void completeValidateAndDelete(${request.requestName} request) 
    	throws CvqException, java.io.IOException {
    	
        // add a document to the request
        ///////////////////////////////

        Document doc = new Document();
        doc.setEcitizenNote("Ma carte d'identit√© !");
        doc.setDepositOrigin(DepositOrigin.ECITIZEN);
        doc.setDepositType(DepositType.PC);
        doc.setHomeFolderId(request.getHomeFolderId());
        doc.setIndividualId(request.getRequesterId());
        doc.setDocumentType(iDocumentTypeService.getDocumentTypeById(IDocumentTypeService.IDENTITY_RECEIPT_TYPE));
        Long documentId = iDocumentService.create(doc);
        i${request.requestName}Service.addDocument(request.getId(), documentId);
        Set<RequestDocument> documentsSet =
            i${request.requestName}Service.getAssociatedDocuments(request.getId());
        assertEquals(documentsSet.size(), 1);

        // FIXME : test list of pending / in-progress registrations
        Critere testCrit = new Critere();
        testCrit.setAttribut(Request.SEARCH_BY_HOME_FOLDER_ID);
        testCrit.setComparatif(Critere.EQUALS);
        testCrit.setValue(request.getHomeFolderId());
        Set<Critere> testCritSet = new HashSet<Critere>();
        testCritSet.add(testCrit);
        List<Request> allRequests = iRequestService.get(testCritSet, null, null, -1, 0);
        assertNotNull(allRequests);

        // close current session and re-open a new one
        continueWithNewTransaction();
        
        SecurityContext.setCurrentSite(localAuthorityName,
                                        SecurityContext.BACK_OFFICE_CONTEXT);
        SecurityContext.setCurrentAgent(agentNameWithCategoriesRoles);
        i${request.requestName}Service.complete(request.getId());
        i${request.requestName}Service.validate(request.getId());

        // close current session and re-open a new one
        continueWithNewTransaction();
        
        byte[] generatedCertificate = iRequestService.getCertificate(request.getId(),
                                                                     RequestState.PENDING);

        if (generatedCertificate == null)
            fail("No certificate found");
            
        //     Write tele-service xml data file
        File xmlFile = File.createTempFile("tmp" + request.getId(), ".xml");
        FileOutputStream xmlFos = new FileOutputStream(xmlFile);
        xmlFos.write(iRequestService.getById(request.getId()).modelToXmlString().getBytes());

        File file = File.createTempFile("tmp" + request.getId(), ".pdf");
        FileOutputStream fos = new FileOutputStream(file);
        fos.write(generatedCertificate);

        // close current session and re-open a new one
        continueWithNewTransaction();
        
        // delete request
        i${request.requestName}Service.delete(request.getId());
    }

    public void testWithHomeFolderPojo()
    		throws CvqException, CvqObjectNotFoundException,
                java.io.FileNotFoundException, java.io.IOException {

         SecurityContext.setCurrentSite(localAuthorityName, SecurityContext.FRONT_OFFICE_CONTEXT);

         // create a vo card request (to create home folder and associates)
         CreationBean cb = gimmeAnHomeFolder();

         SecurityContext.setCurrentEcitizen(cb.getLogin());

         // get the home folder id
         HomeFolder homeFolder = iHomeFolderService.getById(cb.getHomeFolderId());
         assertNotNull(homeFolder);
         Long homeFolderId = homeFolder.getId();
         assertNotNull(homeFolderId);

         // fill and create the request
         //////////////////////////////

         ${request.requestName} request = fillMeARequest();
         request.setRequesterId(SecurityContext.getCurrentUserId());
         ${request.requestName}Feeder.setSubject(request, 
             i${request.requestName}Service.getSubjectPolicy(), null, homeFolder);
         
         Long requestId =
              i${request.requestName}Service.create(request);

         ${request.requestName} requestFromDb =
        	 	(${request.requestName}) i${request.requestName}Service.getById(requestId);
         assertEquals(requestId, requestFromDb.getId());
         assertNotNull(requestFromDb.getRequesterId());
         assertNotNull(requestFromDb.getRequesterLastName());
         if (requestFromDb.getSubjectId() != null)
             assertNotNull(requestFromDb.getSubjectLastName());
         
         completeValidateAndDelete(requestFromDb);

         HomeFolder homeFolderAfterDelete = iHomeFolderService.getById(homeFolderId);
         assertNotNull(homeFolderAfterDelete);
         assertNotNull(iHomeFolderService.getHomeFolderResponsible(homeFolderAfterDelete.getId()));
         
         SecurityContext.resetCurrentSite();
    }

#if(false)
    public void testWithHomeFolderXml() throws CvqException,
			CvqObjectNotFoundException, java.io.FileNotFoundException,
			java.io.IOException {

        startTransaction();
        
	SecurityContext.setCurrentSite(localAuthorityName,
					SecurityContext.FRONT_OFFICE_CONTEXT);

	// create a vo card request (to create home folder and associates)
	CreationBean cb = gimmeAnHomeFolder();

	String proposedLogin = cb.getLogin();

        // close current session and re-open a new one
        continueWithNewTransaction();
        
	SecurityContext.setCurrentEcitizen(proposedLogin);

	// get the home folder id
	HomeFolder homeFolder = iHomeFolderService.getById(cb.getHomeFolderId());
	assertNotNull(homeFolder);
	Long homeFolderId = homeFolder.getId();
	assertNotNull(homeFolderId);

	// fill and create the request
	// ////////////////////////////

	${request.requestName} request = fillMeARequest();
	request.setRequester(homeFolder.getHomeFolderResponsible());
        ${request.requestName}Feeder.setSubject(request, homeFolder);

        Set authorizedSubjects = i${request.requestName}Service.getAuthorizedSubjects(homeFolderId).keySet();

	${request.requestName}Document requestDoc =
		(${request.requestName}Document) request.modelToXml();
	Long requestId = i${request.requestName}Service.create(requestDoc.getDomNode());

        // close current session and re-open a new one
        continueWithNewTransaction();
        
        Map newAuthorizedSubjectsMap = i${request.requestName}Service.getAuthorizedSubjects(homeFolderId);
        if (newAuthorizedSubjectsMap == null) 
            assertEquals(authorizedSubjects.size(), 1);
        else
            assertEquals(newAuthorizedSubjectsMap.size(), authorizedSubjects.size() - 1);

	${request.requestName} requestFromDb = 
		(${request.requestName}) i${request.requestName}Service.getById(requestId);
	assertEquals(requestId, requestFromDb.getId());
	Adult requester = requestFromDb.getRequester();
	assertNotNull(requester);
	assertNotNull(requestFromDb.getMeansOfContact());
    assertEquals(requestFromDb.getMeansOfContact().getType(), MeansOfContactEnum.EMAIL);

        // close current session and re-open a new one
        continueWithNewTransaction();
        
	completeValidateAndDelete(requestFromDb);

        // close current session and re-open a new one
        continueWithNewTransaction();
        
        HomeFolder homeFolderAfterDelete = iHomeFolderService.getById(homeFolderId);
        assertNotNull(homeFolderAfterDelete);
        assertNotNull(homeFolderAfterDelete.getHomeFolderResponsible());
    }
#end

    public void testWithoutHomeFolder()
        throws CvqException, CvqObjectNotFoundException,
               java.io.FileNotFoundException, java.io.IOException {

	      if (!i${request.requestName}Service.supportUnregisteredCreation())
	         return;

	      startTransaction();
	
        SecurityContext.setCurrentSite(localAuthorityName, SecurityContext.FRONT_OFFICE_CONTEXT);
        
        ${request.requestName} request = fillMeARequest();

        Address address = BusinessObjectsFactory.gimmeAdress("12", "Rue d'Aligre", "Paris", "75012");
        Adult requester =
            BusinessObjectsFactory.gimmeAdult(TitleType.MISTER, "LASTNAME", "requester", address,
                                              FamilyStatusType.MARRIED);
        requester.setPassword("requester");
        requester.setAdress(address);
        iHomeFolderService.addHomeFolderRole(requester, RoleEnum.HOME_FOLDER_RESPONSIBLE);
        ${request.requestName}Feeder.setSubject(request, 
            i${request.requestName}Service.getSubjectPolicy(), requester, null);

        Long requestId =
             i${request.requestName}Service.create(request, requester, requester);
        
        // close current session and re-open a new one
        continueWithNewTransaction();
        
        // start testing request creation
        /////////////////////////////////

        ${request.requestName} requestFromDb =
            (${request.requestName}) i${request.requestName}Service.getById(requestId);
        assertEquals(requestId, requestFromDb.getId());
        assertNotNull(requestFromDb.getRequesterId());
        assertNotNull(requestFromDb.getRequesterLastName());
        if (requestFromDb.getSubjectId() != null)
            assertNotNull(requestFromDb.getSubjectLastName());
        
        Long homeFolderId = requestFromDb.getHomeFolderId();
        Long requesterId = requestFromDb.getRequesterId();

        // close current session and re-open a new one
        continueWithNewTransaction();
        
        completeValidateAndDelete(requestFromDb);
        
        // close current session and re-open a new one
        continueWithNewTransaction();
        
        try {
            iHomeFolderService.getById(homeFolderId);
            fail("should not have found home folder");
        } catch (CvqObjectNotFoundException confe) {
            // great, that was expected
        }
        try {
            iIndividualService.getById(requesterId);
            fail("should not have found requester");
        } catch (CvqObjectNotFoundException confe) {
            // great, that was expected
        }

        SecurityContext.resetCurrentSite();
        
        commitTransaction();
    }
}
