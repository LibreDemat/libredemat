<%
import org.apache.commons.lang.StringUtils

namespaceAlias = foObject.namespaceAlias 
namespace = foObject.xsdNamespace
requestName = foObject.requestName
//TODO Remove that 
// Only works with AddressType
def checkExtenalElement(currentElement) {
  if (currentElement.isExternalElement()) {
    if (currentElement.elementList[0].parentXmlSchemaType.equals("AddressType")) {
    	println namespaceAlias + ".set" + currentElement.name + "(new Address())"
    } 
  } 
  else {
    currentElement.elementList.each {
  	  if (it.class.name.indexOf("FieldsetElement") != -1 || it.class.name.indexOf("ComplexElement") != -1) {
  	    checkExtenalElement(it)
  	  }
  	}
  }
}

%>

import fr.cg95.cvq.business.request.social.${requestName}
import fr.cg95.cvq.business.users.Address
import fr.cg95.cvq.service.authority.ILocalAuthorityRegistry
import fr.cg95.cvq.service.request.social.I${requestName}Service

class ${requestName}Controller {

    ${requestName} ${namespaceAlias} 
    I${requestName}Service ${StringUtils.uncapitalize(requestName)}Service
    ILocalAuthorityRegistry localAuthorityRegistry
    
    def translationService
    
    def defaultAction = "edit"
    
    def currentTab = "tab1"
    
    def edit = {
        if (${namespaceAlias} == null)
          ${namespaceAlias} = new ${requestName}()
<%
  for(steps in foObject.stepMap) {
    elements = steps.value.elementList
    elements.each {
      element = it
      if (element.class.name.indexOf("FieldsetElement") != -1 || element.class.name.indexOf("ComplexElement") != -1) {
        checkExtenalElement(element)
      }
    }
  }
%>

        session["${StringUtils.uncapitalize(requestName)}"] = ${namespaceAlias}
        render(view:"frontofficeRequestType/${StringUtils.uncapitalize(requestName)}/edit", 
            model:[${namespaceAlias}:${namespaceAlias}, currentTab:currentTab,
                   translationService:translationService, help:getHelp(),
                   documentTypes:getDocumentTypes()])
    }
    
    <%
    	for(steps in foObject.stepMap) {
			step = steps.value
	%>
    def valid${StringUtils.capitalize(step.name)} = {
        log.debug("valid${StringUtils.capitalize(step.name)} - START")
        ${namespaceAlias} = session["${StringUtils.uncapitalize(requestName)}"]
        bind(${namespaceAlias})
        currentTab = getCurrentTab(params)

        session["${StringUtils.uncapitalize(requestName)}"] = ${namespaceAlias}
        render(view:"frontofficeRequestType/${StringUtils.uncapitalize(requestName)}/edit", 
               model:[${namespaceAlias}:${namespaceAlias}, currentTab:currentTab, 
                      translationService:translationService, help:getHelp(),
                      documentTypes:getDocumentTypes()])
    }
    <%	
    	}
    %>
    
    def getDocumentTypes = {
        def requestType = ${StringUtils.uncapitalize(requestName)}Service.getRequestTypeByLabel(${StringUtils.uncapitalize(requestName)}Service.getLabel())
        def documentTypes = ${StringUtils.uncapitalize(requestName)}Service.getAllowedDocuments(requestType.getId())
        def result = [:]
        documentTypes.each {
            result[it.id] = CapdematUtils.adaptDocumentTypeName(it.name)
        }
        return result
    }
    
    def getHelp = {
        def steps = []
<%
  for (step in foObject.stepMap.values()) {
%>
        steps.add("${step.name}")
<%
  }
%>
        def help = [:]
        steps.each {
            help[it] = localAuthorityRegistry.getBufferedCurrentLocalAuthorityRequestHelp("${StringUtils.uncapitalize(requestName)}",it)
        }

        return help
    }
    
    def getCurrentTab = { currentTab ->
	<%
    	i = 0
		for(steps in foObject.stepMap) {
			step = steps.value
			if (i == 0) {
	%>
		if (params.submit${StringUtils.capitalize(namespaceAlias)}${StringUtils.capitalize(step.name)})
		   currentTab = "tab${i+1}"
	<%			
			} else { 
	%>
		else if (params.submit${StringUtils.capitalize(namespaceAlias)}${StringUtils.capitalize(step.name)})
		   currentTab = "tab${i+1}"
	<%
			}
			i++
		}
	%>
		return currentTab
    } 
    
    def checkConditions = {
    	log.debug("checkConditions - START")
    	def conditions = new HashMap();
    	params.each {
    		if (it.key.contains("cn_")) {
    			conditions.put(it.value, new HashMap())
    		}	
    	}
    	params.each {
    	  def currentParam = it
    	  conditions.each {
    	    if (currentParam.key.contains(it.key) && !currentParam.key.contains("cn_")) {
    	      def triggerName = currentParam.key.substring(currentParam.key.indexOf("_") + 1, currentParam.key.length())
    	      conditions.get(it.key).put(triggerName, currentParam.value)
    	    }
    	  }
    	}
    	def args = [conditions]
    	render ${StringUtils.uncapitalize(requestName)}Service.invokeMethod("areConditionsFilled", args as Object[])
    }
    
}
