## calculate XPath expression to select field to display
#macro (setXpathExpr $element)
  #if($element.selectXPath)
    #if($element.parentElementName)
      #set($xpathExpr = "//${element.namespaceAlias}:${element.parentElementName}/${element.selectXPath}")
    #else
      #set($xpathExpr = "//${element.namespaceAlias}:${element.elementName}/${element.selectXPath}")
    #end
  #elseif($element.parentElementName)
    #set($xpathExpr = "//${element.namespaceAlias}:${element.parentElementName}/${element.namespaceAlias}:${element.elementName}")
  #else
    #set($xpathExpr = "//${element.namespaceAlias}:${element.elementName}")
  #end
#end
## --- calculate XPath expression to select field to display
## - Manage same siblings name
#macro (setXpathExprSameSibling $element )
  #if($element.parentElementName)
    #set($xpathExpr = "./${element.namespaceAlias}:${element.elementName}")
  #else
    #set($xpathExpr = "//${element.namespaceAlias}:${element.elementName}[position()]")
  #end
#end
## --- Get element label from an element
#macro (setElementLabel $element)
  #if($element.usePrefixLabel)
    #set($elementLabel = $element.prefixLabel)
    #if($element.requiredSymbol)
      #set($elementLabel = "$elementLabel*")
    #end
  #else
    #set($elementLabel = "")
  #end
#end
## --- Generate XslFO code to display StringElement and SimpleTemplateElement widget
#macro(simpleTemplateElementToXslfo $element)
<fo:table xsl:use-attribute-sets="request.field.inline.table">
  <fo:table-column column-width="proportional-column-width(100)" />
  <fo:table-column column-width="proportional-column-width(200)" />
  <fo:table-column column-width="proportional-column-width(100)" />
  
  <fo:table-body>
    <fo:table-row>
      <fo:table-cell>
       <fo:block xsl:use-attribute-sets="request.field.inline.label">
	$elementLabel
       </fo:block>
      </fo:table-cell>
      <fo:table-cell>
        <fo:block xsl:use-attribute-sets="request.field.inline.string_value">
  #if($element.displayType == "string")
          <xsl:choose>
            <xsl:when test="${xpathExpr} and ${xpathExpr} != ''">
    #if($element.referential)
              <xsl:variable name="current_value" select="$xpathExpr"/>
              <xsl:for-each select="locservice:getEnumsDataNode($localizationService,'${element.elementTypeNamespace}','${element.elementType}','fr')//ref:data[@name = '${element.elementType}']/ref:entry">
                <xsl:if test="@key = $current_value">
                  <xsl:value-of select="./ref:label[@lang = 'fr']"/>
                </xsl:if>
              </xsl:for-each>
    #else
              <xsl:value-of select="${xpathExpr}" />
    #end
             </xsl:when>
             <xsl:otherwise>
               <xsl:text>&#160;</xsl:text>
             </xsl:otherwise>
           </xsl:choose>
  #elseif($element.displayType == "simple_template")
          <xsl:call-template name="${element.templateName}">
            <xsl:with-param name="${element.templateParam}">
              <xsl:value-of select="$xpathExpr"/>
            </xsl:with-param>
          </xsl:call-template>
  #end
        </fo:block>
      </fo:table-cell>
    </fo:table-row>
  </fo:table-body>
</fo:table>
#end
## --- Generate XslFO code to display ComplexTemplateElement  widget
#macro(complexTemplateElementToXslfo $element)
  #if($element.manyValues)
  <xsl:for-each select="$xpathExpr">
    <xsl:apply-templates select="."/>
    <xsl:if test="not(position() = last())">
      <fo:block>
        <fo:leader leader-pattern="dots" leader-length.optimum="100%"/>
      </fo:block>
    </xsl:if>
  </xsl:for-each>
  #else
  <xsl:apply-templates select="$xpathExpr"/>
  #end
#end
## --- Generate XslFO code to display YesNoCheckboxElement  widget
#macro(yesNoCheckboxElementToXslfo $element)
  #setElementLabel( $element )
  #setXpathExprSameSibling( $element )

  #set($columnNbDiff = $blockColumnNb - $element.columnSpan)
  #set($columnWeight = $element.columnSpan) 
  <fo:table xsl:use-attribute-sets="request.field.inline.table">
    <fo:table-column column-width="proportional-column-width(2 * 1)" />
    <fo:table-column column-width="proportional-column-width(1) - 30pt" />
    <fo:table-column column-width="30pt" />
    <fo:table-column column-width="proportional-column-width(1) - 30pt" />
    <fo:table-column column-width="30pt" />
    <fo:table-column column-width="proportional-column-width(4)" />

    <fo:table-body>
      <fo:table-row>
        <fo:table-cell>
          <fo:block xsl:use-attribute-sets="request.field.inline.label">
  $elementLabel
          </fo:block>
        </fo:table-cell>
        <fo:table-cell>
          <fo:block xsl:use-attribute-sets="request.field.yesno.label">OUI</fo:block>
       </fo:table-cell>
       <fo:table-cell>
         <fo:block xsl:use-attribute-sets="request.field.yesno.value">
           <xsl:if test="$xpathExpr = &quot;true&quot;">X</xsl:if>
           <xsl:if test="$xpathExpr = &quot;false&quot;">&#160;</xsl:if>
         </fo:block>
       </fo:table-cell>
       <fo:table-cell>
         <fo:block xsl:use-attribute-sets="request.field.yesno.label">NON</fo:block>
       </fo:table-cell>
       <fo:table-cell>
         <fo:block xsl:use-attribute-sets="request.field.yesno.value">
           <xsl:if test="$xpathExpr = &quot;false&quot;">X</xsl:if>
           <xsl:if test="$xpathExpr = &quot;true&quot;">&#160;</xsl:if>
         </fo:block>
       </fo:table-cell>
       <fo:table-cell>
         <fo:block>&#160;</fo:block>
       </fo:table-cell>
     </fo:table-row>
   </fo:table-body>
</fo:table>
#end
## --- Generate XslFO code to display varargCheckboxElement  widget
#macro(varargCheckboxElementToXslfo $element)
      #setElementLabel( $element )
      #setXpathExprSameSibling( $element )
      #if($element.displayType == "vararg_checkbox_with_precision")
        #set($enumTypeName = $element.enumElementType)
      #else
        #set($enumTypeName = $element.elementType)
      #end

      #if($element.displayType == "vararg_checkbox_with_precision")
            <xsl:variable name="precisionValue" select="$xpathExpr/${element.namespaceAlias}:${element.precisionElementName}/text()"/>
            <xsl:variable name="enumValue" select="$xpathExpr/${element.namespaceAlias}:${element.enumElementName}/text()"/>
      #end
            <fo:table xsl:use-attribute-sets="request.field.inline.table">
              <xsl:variable name="mod_column" select="'${element.displayModulo}'"/>
              <xsl:variable name="enum_tokens">
                <xsl:call-template name="split-string">
      #if($element.displayType == "vararg_checkbox_with_precision")
                  <xsl:with-param name="string" select="$xpathExpr/$element.namespaceAlias:$element.enumElementName/text()"/>
      #else
                  <xsl:with-param name="string" select="$xpathExpr/text()"/>
      #end
                </xsl:call-template>
              </xsl:variable>
      #if($element.usePrefixLabel)
              <fo:table-column column-width="100pt" />
      #end

              <xsl:for-each select="locservice:getEnumsDataNode($localizationService,'${request.targetNamespace}','${element.elementType}','fr')//ref:data[@name = '${element.elementType}']/ref:entry">
                <xsl:if test="not(position() &gt; ($mod_column + 1))">
                  <fo:table-column column-width="30pt" />
                  <fo:table-column column-width="proportional-column-width(1) - 30pt"/>
                </xsl:if>
              </xsl:for-each>

              <fo:table-body>
      #if($element.usePrefixLabel)
                <xsl:text disable-output-escaping="yes">&lt;fo:table-row&gt;</xsl:text>
                <fo:table-cell>
	          <fo:block xsl:use-attribute-sets="request.field.inline.label">
		    $elementLabel
		  </fo:block>
	        </fo:table-cell>
      #end

                <xsl:for-each select="locservice:getEnumsDataNode($localizationService,'${request.targetNamespace}','${element.elementType}','fr')//ref:data[@name = '${element.elementType}']/ref:entry">

	          ## if there's a prefix label, the row is already started
      #if(!$element.usePrefixLabel)
	          <xsl:if test="position() = 1">
	            <xsl:text disable-output-escaping="yes">&lt;fo:table-row&gt;</xsl:text>
	          </xsl:if>
      #end
	          ## start a new row
	          <xsl:if test="(position() != 1) and ((position() mod $mod_column) = 1)">
	            <xsl:text disable-output-escaping="yes">&lt;fo:table-row&gt;</xsl:text>
	            ## if there's a prefix label, set an empty cell below it
      #if($element.usePrefixLabel)
	              <xsl:text disable-output-escaping="yes">&lt;fo:table-cell&gt;&lt;fo:block&gt;&#160;&lt;/fo:block&gt;&lt;/fo:table-cell&gt;</xsl:text>
      #end
	          </xsl:if>
	          <fo:table-cell>
	            <fo:block xsl:use-attribute-sets="request.field.checkbox.value">
		      <xsl:variable name="current_value" select="@key"/>
		      <xsl:for-each select="exslt:node-set($enum_tokens)/words/w">
			<xsl:choose>
			  <xsl:when test="text() = $current_value">X</xsl:when>
			  <xsl:otherwise>&#160;</xsl:otherwise>
			</xsl:choose>
                      </xsl:for-each>
	            </fo:block>
	          </fo:table-cell>
	          <fo:table-cell>
	            <fo:block xsl:use-attribute-sets="request.field.checkbox.label">
                      <xsl:value-of select="./ref:label[@lang='fr']"/>
      #if($element.displayType == "vararg_checkbox_with_precision")
        #foreach($displayCondition in $element.precisions.keySet())
                      <xsl:if test="$displayCondition">
                        <fo:block>
                          <xsl:text>$element.precisions.get($displayCondition) :</xsl:text>
        		  <fo:block xsl:use-attribute-sets="request.field.inline.string_value">
                            <xsl:if test="$enumValue = @key">
                              <xsl:value-of select="$precisionValue"/>
                            </xsl:if>
                            <xsl:if test="not($enumValue = @key)">
                              &#160;
                            </xsl:if>
                          </fo:block>
                        </fo:block>
                      </xsl:if>
        #end
      #end
	            </fo:block>
	          </fo:table-cell>
	          <xsl:if test="((position() mod $mod_column) = 0) or (position() = last())">
	            <xsl:text disable-output-escaping="yes">&lt;/fo:table-row&gt;</xsl:text>
	            ## only set an empty row if it's not the last checkbox to display
	            <xsl:if test="not(position() = last())">
	              <xsl:text disable-output-escaping="yes">&lt;fo:table-row&gt;&lt;fo:table-cell&gt;&lt;fo:block&gt;&#160;&lt;/fo:block&gt;&lt;/fo:table-cell&gt;&lt;/fo:table-row&gt;</xsl:text>
	            </xsl:if>
	          </xsl:if>
	        </xsl:for-each>
              </fo:table-body>
            </fo:table>
#end
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" 
  xmlns:${request.namespaceAlias}="${request.targetNamespace}" 
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:fo="http://www.w3.org/1999/XSL/Format" 
  xmlns:cvq="http://www.cg95.fr/cvq/schema/common"
  xmlns:ref="http://www.cg95.fr/cvq/schema/referential" 
  xmlns:exslt="http://exslt.org/common"
  xmlns:locservice="java:fr.cg95.cvq.util.localization.impl.LocalizationService">

  <xsl:include href="styleAttributes.xsl"/>
  <xsl:include href="commonReferentialTemplates.xsl"/>
  <xsl:include href="commonRequestTemplates.xsl"/>
  <xsl:include href="split-string.xslt"/>

  <xsl:param name="logoSource" select="''"/>
  <xsl:param name="localAuthorityName" select="''"/>
  <xsl:param name="friendlyLocalAuthorityName" select="''"/>
  <xsl:param name="localizationService" select="''"/>
  
  <xsl:template match="/">

    <fo:root xmlns:fo="http://www.w3.org/1999/XSL/Format">

      <fo:layout-master-set>
        <fo:simple-page-master master-name="default-page" 
	  page-height="297mm" page-width="210mm" 
	  margin-left="0.6in" margin-right="0.6in"
	  margin-top="0.1in" margin-bottom="0.1in">
          <fo:region-body/>
        </fo:simple-page-master>
      </fo:layout-master-set>

      <fo:page-sequence master-reference="default-page" initial-page-number="1">

	<fo:flow flow-name="xsl-region-body">

	  <fo:block>
	    <xsl:call-template name="requestHeader">
	      <xsl:with-param name="RequestName">${request.getFriendlyName("fr")}</xsl:with-param>
	      <xsl:with-param name="FriendlyLocalAuthorityName"><xsl:value-of select="$friendlyLocalAuthorityName"/></xsl:with-param>
	    </xsl:call-template>

#foreach($blockDef in $request.blockDefMap.values())
  #if($blockDef.displayCondition)
            <xsl:if test="$blockDef.displayCondition">
  #end
  #set($blockColumnNb = $blockDef.columnNb)
  #if($blockDef.label)
            <fo:block xsl:use-attribute-sets="request.section.header">${blockDef.label}</fo:block>
	    <fo:block>
	      <fo:leader leader-pattern="space" />
	    </fo:block>
  #end
  #foreach($lineInBlock in $blockDef.blockLineMap.keySet())
    #set($blockElementMap = $blockDef.blockLineMap.get($lineInBlock))
    #set($firstElementInLine = $blockElementMap.values().iterator().next())
    
    #if($firstElementInLine.displayType == "local_complex_element")  
      #setXpathExpr( $firstElementInLine )
    <xsl:variable name="withTotal" select="'${firstElementInLine.withTotal}'" />

    <xsl:for-each select="$xpathExpr">
      #foreach($subElement in $firstElementInLine.elementList)
        #setElementLabel( $subElement )
        #setXpathExprSameSibling( $subElement )
        #if($subElement.displayType == "string" || $subElement.displayType == "simple_template")
          #simpleTemplateElementToXslfo( $subElement )
        #elseif($subElement.displayType == "complex_template")
          #complexTemplateElementToXslfo( $subElement )
        #elseif($subElement.displayType == "yesno_checkbox")
          #yesNoCheckboxElementToXslfo( $subElement )
        #elseif ($subElement.displayType == "vararg_checkbox" || $subElement.displayType == "vararg_checkbox_with_precision")
          #varargCheckboxElementToXslfo( $subElement )
        #end 
      #end
      <xsl:if test="$withTotal = 'true'  or not(position() = last())">
        <fo:block>
          <fo:leader leader-pattern="dots" leader-length.optimum="100%"/>
          <fo:leader leader-pattern="space" />
        </fo:block>
      </xsl:if>
    </xsl:for-each>
    #elseif($firstElementInLine.displayType == "string" || $firstElementInLine.displayType == "simple_template")
      ## calculate columns size and span
      #set($columnUsed = 0)
      #foreach($element in $blockElementMap.values())
	#set($columnUsed = $columnUsed + $element.columnSpan)
      #end
      #set($columnNbDiff = $blockColumnNb - $columnUsed)
        <fo:table xsl:use-attribute-sets="request.field.inline.table">
      #foreach($element in $blockElementMap.values())
        #set($columnWeight = $element.columnSpan)
        #if ($element.displayType == "string" && $element.restrictToChar)
          <fo:table-column column-width="proportional-column-width(200 * $columnWeight) - 30pt" />
          <fo:table-column column-width="30pt" />
        #else
          #set($labelColumnWeight = ((200 * $columnWeight) / (1 + $element.getValueWeight())))
          #set($valueColumnWeight = ((200 * $columnWeight * $element.getValueWeight()) / (1 + $element.getValueWeight())))
          <fo:table-column column-width="proportional-column-width($labelColumnWeight)" />
          <fo:table-column column-width="proportional-column-width($valueColumnWeight)" />
        #end
      #end
      #if($columnNbDiff > 0)
        #set($emptyColumnWeight = ((200 * $columnNbDiff) / $columnUsed))
	      <fo:table-column column-width="proportional-column-width($emptyColumnWeight)" />
      #end
	      <fo:table-body>
		<fo:table-row>
      #foreach($element in $blockElementMap.values())
	#setElementLabel( $element )
        #setXpathExpr( $element )
		  <fo:table-cell>
		    <fo:block xsl:use-attribute-sets="request.field.inline.label">
		      $elementLabel
		    </fo:block>
		  </fo:table-cell>
		  <fo:table-cell>
        #if ($element.displayType == "string" && $element.restrictToChar)
		    <fo:block xsl:use-attribute-sets="request.field.inline.char_value">
        #else
		    <fo:block xsl:use-attribute-sets="request.field.inline.string_value">
        #end
        #if($element.displayType == "string")
                      <xsl:choose>
                        <xsl:when test="${xpathExpr} and ${xpathExpr} != ''">
          #if($element.referential)
			  <xsl:variable name="current_value" select="$xpathExpr"/>
                          <xsl:for-each select="locservice:getEnumsDataNode($localizationService,'${element.elementTypeNamespace}','${element.elementType}','fr')//ref:data[@name = '${element.elementType}']/ref:entry">
			    <xsl:if test="@key = $current_value">
			      <xsl:value-of select="./ref:label[@lang = 'fr']"/>
			    </xsl:if>
			  </xsl:for-each>
          #else
                          <xsl:value-of select="${xpathExpr}" />
          #end
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:text>&#160;</xsl:text>
                        </xsl:otherwise>
                      </xsl:choose>
        #elseif($element.displayType == "simple_template")
	              <xsl:call-template name="${element.templateName}">
		        <xsl:with-param name="${element.templateParam}">
		          <xsl:value-of select="$xpathExpr"/>
		        </xsl:with-param>
	              </xsl:call-template>
	#end
		    </fo:block>
		  </fo:table-cell>
      #end
      #if($columnNbDiff > 0)
		  <fo:table-cell>
		    <fo:block>&#160;</fo:block>
		  </fo:table-cell>
      #end
		</fo:table-row>
	      </fo:table-body>
	    </fo:table>

    #elseif ($firstElementInLine.displayType == "complex_template")
      #setXpathExpr( $firstElementInLine )
      #if($firstElementInLine.manyValues)
            <xsl:for-each select="$xpathExpr">
	      <xsl:apply-templates select="."/>
              <xsl:if test="not(position() = last())">
	        <fo:block>
	          <fo:leader leader-pattern="dots" leader-length.optimum="100%"/>
	        </fo:block>
	      </xsl:if>
            </xsl:for-each>
      #else
	    <xsl:apply-templates select="$xpathExpr"/>
      #end

    #elseif ($firstElementInLine.displayType == "local_referential")
      #set($element = $firstElementInLine)
      #setElementLabel( $element )
      #setXpathExpr( $element )
      #if($element.usePrefixLabel)
            <fo:block xsl:use-attribute-sets="request.field.inline.label">$elementLabel :</fo:block>
      #end
	    <xsl:call-template name="LocalReferentialDataType">
	      <xsl:with-param name="ReferentialData" select="document(string(concat($localAuthorityName,'/local_referential/local_referential_${element.namespaceAlias}.xml')))//ref:data[@name = '${element.elementName}']/ref:entries"/>
	      <xsl:with-param name="RequestData" select="//${element.namespaceAlias}:${element.elementName}"/>
	    </xsl:call-template>

    #elseif ($firstElementInLine.displayType == "place_reservation")
      #set($element = $firstElementInLine)
      #setElementLabel( $element )
      #setXpathExpr( $element )
      #if($element.usePrefixLabel)
            <fo:block xsl:use-attribute-sets="request.field.inline.label">$elementLabel :</fo:block>
      #end
	    <xsl:call-template name="PlaceReservationDataType">
	      <xsl:with-param name="ReservationData" select="document(string(concat($localAuthorityName,'/local_referential/place_reservation_${element.namespaceAlias}.xml')))//ref:data"/>
	      <xsl:with-param name="RequestData" select="//${element.namespaceAlias}:${element.elementName}"/>
	    </xsl:call-template>

    #elseif ($firstElementInLine.displayType == "vararg_checkbox" || $firstElementInLine.displayType == "vararg_checkbox_with_precision")
      #set($element = $firstElementInLine)
      #setElementLabel( $element )
      #setXpathExpr( $element )
      #if($element.displayType == "vararg_checkbox_with_precision")
        #set($enumTypeName = $element.enumElementType)
      #else
        #set($enumTypeName = $element.elementType)
      #end

      #if($element.displayType == "vararg_checkbox_with_precision")
            <xsl:variable name="precisionValue" select="$xpathExpr/${element.namespaceAlias}:${element.precisionElementName}/text()"/>
            <xsl:variable name="enumValue" select="$xpathExpr/${element.namespaceAlias}:${element.enumElementName}/text()"/>
      #end
            <fo:table xsl:use-attribute-sets="request.field.inline.table">
              <xsl:variable name="mod_column" select="'${element.displayModulo}'"/>
              <xsl:variable name="enum_tokens">
                <xsl:call-template name="split-string">
      #if($element.displayType == "vararg_checkbox_with_precision")
                  <xsl:with-param name="string" select="$xpathExpr/$element.namespaceAlias:$element.enumElementName/text()"/>
      #else
                  <xsl:with-param name="string" select="$xpathExpr/text()"/>
      #end
                </xsl:call-template>
              </xsl:variable>
      #if($element.usePrefixLabel)
              <fo:table-column column-width="100pt" />
      #end

              <xsl:for-each select="locservice:getEnumsDataNode($localizationService,'${element.elementTypeNamespace}','${element.elementType}','fr')//ref:data[@name = '${element.elementType}']/ref:entry">
                <xsl:if test="not(position() &gt; ($mod_column + 1))">
                  <fo:table-column column-width="30pt" />
                  <fo:table-column column-width="proportional-column-width(1) - 30pt"/>
                </xsl:if>
              </xsl:for-each>

              <fo:table-body>
      #if($element.usePrefixLabel)
                <xsl:text disable-output-escaping="yes">&lt;fo:table-row&gt;</xsl:text>
                <fo:table-cell>
	          <fo:block xsl:use-attribute-sets="request.field.inline.label">
		    $elementLabel
		  </fo:block>
	        </fo:table-cell>
      #end

                <xsl:for-each select="locservice:getEnumsDataNode($localizationService,'${element.elementTypeNamespace}','${element.elementType}','fr')//ref:data[@name = '${element.elementType}']/ref:entry">

	          ## if there's a prefix label, the row is already started
      #if(!$element.usePrefixLabel)
	          <xsl:if test="position() = 1">
	            <xsl:text disable-output-escaping="yes">&lt;fo:table-row&gt;</xsl:text>
	          </xsl:if>
      #end
	          ## start a new row
	          <xsl:if test="(position() != 1) and ((position() mod $mod_column) = 1)">
	            <xsl:text disable-output-escaping="yes">&lt;fo:table-row&gt;</xsl:text>
	            ## if there's a prefix label, set an empty cell below it
      #if($element.usePrefixLabel)
	              <xsl:text disable-output-escaping="yes">&lt;fo:table-cell&gt;&lt;fo:block&gt;&#160;&lt;/fo:block&gt;&lt;/fo:table-cell&gt;</xsl:text>
      #end
	          </xsl:if>
	          <fo:table-cell>
	            <fo:block xsl:use-attribute-sets="request.field.checkbox.value">
		      <xsl:variable name="current_value" select="@key"/>
		      <xsl:for-each select="exslt:node-set($enum_tokens)/words/w">
			<xsl:choose>
			  <xsl:when test="text() = $current_value">X</xsl:when>
			  <xsl:otherwise>&#160;</xsl:otherwise>
			</xsl:choose>
                      </xsl:for-each>
	            </fo:block>
	          </fo:table-cell>
	          <fo:table-cell>
	            <fo:block xsl:use-attribute-sets="request.field.checkbox.label">
                      <xsl:value-of select="./ref:label[@lang='fr']"/>
      #if($element.displayType == "vararg_checkbox_with_precision")
        #foreach($displayCondition in $element.precisions.keySet())
                      <xsl:if test="$displayCondition">
                        <fo:block>
                          <xsl:text>$element.precisions.get($displayCondition) :</xsl:text>
        		  <fo:block xsl:use-attribute-sets="request.field.inline.string_value">
                            <xsl:if test="$enumValue = @key">
                              <xsl:value-of select="$precisionValue"/>
                            </xsl:if>
                            <xsl:if test="not($enumValue = @key)">
                              &#160;
                            </xsl:if>
                          </fo:block>
                        </fo:block>
                      </xsl:if>
        #end
      #end
	            </fo:block>
	          </fo:table-cell>
	          <xsl:if test="((position() mod $mod_column) = 0) or (position() = last())">
	            <xsl:text disable-output-escaping="yes">&lt;/fo:table-row&gt;</xsl:text>
	            ## only set an empty row if it's not the last checkbox to display
	            <xsl:if test="not(position() = last())">
	              <xsl:text disable-output-escaping="yes">&lt;fo:table-row&gt;&lt;fo:table-cell&gt;&lt;fo:block&gt;&#160;&lt;/fo:block&gt;&lt;/fo:table-cell&gt;&lt;/fo:table-row&gt;</xsl:text>
	            </xsl:if>
	          </xsl:if>
	        </xsl:for-each>
              </fo:table-body>
            </fo:table>

    #elseif ($firstElementInLine.displayType == "yesno_checkbox")
      #set($element = $firstElementInLine)
      #setElementLabel( $element )
      #setXpathExpr( $element )

      #set($columnNbDiff = $blockColumnNb - $element.columnSpan)
      #set($columnWeight = $element.columnSpan) 
	    <fo:table xsl:use-attribute-sets="request.field.inline.table">
	      <fo:table-column column-width="proportional-column-width(2 * $columnWeight)" />
	      <fo:table-column column-width="proportional-column-width($columnWeight) - 30pt" />
	      <fo:table-column column-width="30pt" />
	      <fo:table-column column-width="proportional-column-width($columnWeight) - 30pt" />
	      <fo:table-column column-width="30pt" />
      #if($columnNbDiff > 0)
        #set($emptyColumnWeight = ((4 * $columnNbDiff) / $element.columnSpan))
	      <fo:table-column column-width="proportional-column-width($emptyColumnWeight)" />
      #end
	      <fo:table-body>
		<fo:table-row>
		  <fo:table-cell>
		    <fo:block xsl:use-attribute-sets="request.field.inline.label">
		      $elementLabel
		    </fo:block>
		  </fo:table-cell>
		  <fo:table-cell>
		    <fo:block xsl:use-attribute-sets="request.field.yesno.label">OUI</fo:block>
		  </fo:table-cell>
		  <fo:table-cell>
		    <fo:block xsl:use-attribute-sets="request.field.yesno.value">
		      <xsl:if test="$xpathExpr = &quot;true&quot;">X</xsl:if>
		      <xsl:if test="$xpathExpr = &quot;false&quot;">&#160;</xsl:if>
		    </fo:block>
		  </fo:table-cell>
		  <fo:table-cell>
		    <fo:block xsl:use-attribute-sets="request.field.yesno.label">NON</fo:block>
		  </fo:table-cell>
		  <fo:table-cell>
		    <fo:block xsl:use-attribute-sets="request.field.yesno.value">
		      <xsl:if test="$xpathExpr = &quot;false&quot;">X</xsl:if>
		      <xsl:if test="$xpathExpr = &quot;true&quot;">&#160;</xsl:if>
		    </fo:block>
		  </fo:table-cell>
      #if($columnNbDiff > 0)
		  <fo:table-cell>
		    <fo:block>&#160;</fo:block>
		  </fo:table-cell>
      #end
		</fo:table-row>
	      </fo:table-body>
	    </fo:table>

    #elseif ($firstElementInLine.displayType == "signature")
      #set($element = $firstElementInLine)
      #setElementLabel( $element )
      #setXpathExpr( $element )
	    <fo:block xsl:use-attribute-sets="request.signature">
	      <xsl:if test="$xpathExpr/text() = &quot;true&quot;">
      #foreach($msg in $element.acceptMessages.values())
		<fo:inline>$msg</fo:inline>
		<fo:block>
		  <fo:leader leader-pattern="space" />
		</fo:block>
      #end
		<fo:inline>A* ...................................................,&#160;&#160;le*&#160;&#160;...../...../.......&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Signature du demandeur * 
		</fo:inline>
		<fo:block>
		  <fo:leader leader-pattern="space" />
		</fo:block>
		<fo:block>
		  <fo:leader leader-pattern="space" />
		</fo:block>
		<fo:block>
		  <fo:leader leader-pattern="space" />
		</fo:block>
	      </xsl:if>
	      <xsl:if test="$xpathExpr/text() = &quot;false&quot;">
      #foreach($msg in $element.rejectMessages.values())
		<fo:inline>$msg</fo:inline>
		<fo:block>
		  <fo:leader leader-pattern="space" />
		</fo:block>
      #end
	      </xsl:if>
	    </fo:block>

    #end

    #if($firstElementInLine.footNotice)
	    <fo:block xsl:use-attribute-sets="request.field.notice">
	      ${firstElementInLine.footNotice}
	    </fo:block>

    #end
  #end

  #if($blockDef.breakAfter)
            <fo:block break-after="page"/>
  #else
            <fo:block>
              <fo:leader leader-pattern="space" />
            </fo:block>
  #end

  #if($blockDef.displayCondition)
            </xsl:if>
  #end
#end

	    <xsl:call-template name="requestFooter">
	      <xsl:with-param name="RequestId">
            <xsl:value-of select="${request.namespaceAlias}:${request.requestName}/cvq:Id"/>
          </xsl:with-param>
	      <xsl:with-param name="CreationDate">
            <xsl:value-of select="${request.namespaceAlias}:${request.requestName}/cvq:CreationDate"/>
          </xsl:with-param>
	    </xsl:call-template>

      </fo:block>
	</fo:flow>
      </fo:page-sequence>
    </fo:root>
  </xsl:template>

#foreach($blockDef in $request.blockDefMap.values())
  #foreach($lineInBlock in $blockDef.blockLineMap.keySet())
    #set($blockElementMap = $blockDef.blockLineMap.get($lineInBlock))
    #set($firstElementInLine = $blockElementMap.values().iterator().next())
    #if($firstElementInLine.displayType == "complex_template")
      #if($firstElementInLine.selectXPath)
  <xsl:template match="${firstElementInLine.selectXPath}">
      #else
  <xsl:template match="//${firstElementInLine.namespaceAlias}:${firstElementInLine.elementName}">
      #end
    <xsl:call-template name="$firstElementInLine.templateName">
      <xsl:with-param name="localizationService" select="$localizationService"></xsl:with-param>
    </xsl:call-template>
  </xsl:template>
    #elseif($firstElementInLine.displayType == "local_complex_element")
      #foreach($subElement in $firstElementInLine.elementList)
        #if($subElement.displayType == "complex_template")
          #setXpathExpr( $subElement )
          #if($subElement.selectXPath)
  <xsl:template match="${subElement.selectXPath}">
          #else
  <xsl:template match="$xpathExpr">
          #end
    <xsl:call-template name="$subElement.templateName">
      <xsl:with-param name="localizationService" select="$localizationService"></xsl:with-param>
    </xsl:call-template>
  </xsl:template>
        #end
      #end
    #end
  #end
#end
</xsl:stylesheet>
